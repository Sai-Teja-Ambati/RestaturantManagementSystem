<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Dockerfile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Dockerfile" />
              <option name="originalContent" value="FROM maven:3.8-eclipse-temurin-17 AS build&#10;&#10;# Set up working directory for building&#10;WORKDIR /app&#10;&#10;# Copy project files&#10;COPY pom.xml .&#10;COPY src ./src&#10;&#10;# Build the application with explicit output&#10;RUN echo &quot;Starting Maven build...&quot; &amp;&amp; \&#10;    mvn clean compile package -DskipTests -X &amp;&amp; \&#10;    echo &quot;Build completed. Checking target directory:&quot; &amp;&amp; \&#10;    ls -la /app/target/&#10;&#10;# Verify the JAR file was created&#10;RUN if [ ! -f &quot;/app/target/restaurant-management-system-1.0.0.jar&quot; ]; then \&#10;        echo &quot;ERROR: JAR file not found! Available files:&quot;; \&#10;        ls -la /app/target/; \&#10;        exit 1; \&#10;    else \&#10;        echo &quot;SUCCESS: JAR file created successfully&quot;; \&#10;        ls -la /app/target/restaurant-management-system-1.0.0.jar; \&#10;    fi&#10;&#10;# Runtime stage&#10;FROM eclipse-temurin:17-jre&#10;&#10;# Install PostgreSQL client and other utilities&#10;RUN apt-get update &amp;&amp; \&#10;    apt-get install -y postgresql-client curl &amp;&amp; \&#10;    apt-get clean &amp;&amp; \&#10;    rm -rf /var/lib/apt/lists/*&#10;&#10;WORKDIR /app&#10;&#10;# Copy the JAR file from build stage&#10;COPY --from=build /app/target/restaurant-management-system-1.0.0.jar /app/app.jar&#10;&#10;# Copy resources&#10;COPY --from=build /app/src/main/resources/ /app/resources/&#10;&#10;# Verify JAR file exists in runtime&#10;RUN ls -la /app/ &amp;&amp; \&#10;    echo &quot;Verifying JAR contents:&quot; &amp;&amp; \&#10;    jar -tf /app/app.jar | head -20&#10;&#10;# Expose the port&#10;EXPOSE 8080&#10;&#10;# Set environment variables&#10;ENV JAVA_OPTS=&quot;-Xmx512m -Xms256m&quot;&#10;&#10;# Run the application&#10;CMD [&quot;java&quot;, &quot;-jar&quot;, &quot;/app/app.jar&quot;]&#10;" />
              <option name="updatedContent" value="FROM maven:3.8-eclipse-temurin-17 AS build&#10;&#10;# Set up working directory for building&#10;WORKDIR /app&#10;&#10;# Copy project files&#10;COPY pom.xml .&#10;COPY src ./src&#10;&#10;# Build the application with explicit output&#10;RUN echo &quot;Starting Maven build...&quot; &amp;&amp; \&#10;    mvn clean compile package -DskipTests -X &amp;&amp; \&#10;    echo &quot;Build completed. Checking target directory:&quot; &amp;&amp; \&#10;    ls -la /app/target/&#10;&#10;# Verify the JAR file was created&#10;RUN if [ ! -f &quot;/app/target/restaurant-management-system-1.0.0.jar&quot; ]; then \&#10;        echo &quot;ERROR: JAR file not found! Available files:&quot;; \&#10;        ls -la /app/target/; \&#10;        exit 1; \&#10;    else \&#10;        echo &quot;SUCCESS: JAR file created successfully&quot;; \&#10;        ls -la /app/target/restaurant-management-system-1.0.0.jar; \&#10;    fi&#10;&#10;# Runtime stage&#10;FROM eclipse-temurin:17-jre&#10;&#10;# Install PostgreSQL client and other utilities&#10;RUN apt-get update &amp;&amp; \&#10;    apt-get install -y postgresql-client curl &amp;&amp; \&#10;    apt-get clean &amp;&amp; \&#10;    rm -rf /var/lib/apt/lists/*&#10;&#10;WORKDIR /app&#10;&#10;# Copy the JAR file from build stage&#10;COPY --from=build /app/target/restaurant-management-system-1.0.0.jar /app/app.jar&#10;&#10;# Copy resources&#10;COPY --from=build /app/src/main/resources/ /app/resources/&#10;&#10;# Verify JAR file exists in runtime&#10;RUN ls -la /app/ &amp;&amp; \&#10;    echo &quot;Verifying JAR contents:&quot; &amp;&amp; \&#10;    jar -tf /app/app.jar | head -20&#10;&#10;# Expose the port&#10;EXPOSE 8080&#10;&#10;# Set proper terminal environment for interactive input&#10;ENV TERM=xterm&#10;&#10;# Set command to run with the -i flag to ensure System.in works properly&#10;ENTRYPOINT [&quot;java&quot;, &quot;-Dfile.encoding=UTF-8&quot;, &quot;-jar&quot;, &quot;/app/app.jar&quot;]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docker-compose.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docker-compose.yml" />
              <option name="originalContent" value="version: '3.8'&#10;&#10;services:&#10;  # PostgreSQL Database&#10;  postgres:&#10;    image: postgres:15-alpine&#10;    container_name: restaurant_db&#10;    environment:&#10;      POSTGRES_DB: restaurant_management&#10;      POSTGRES_USER: restaurant_user&#10;      POSTGRES_PASSWORD: restaurant_password&#10;      POSTGRES_INITDB_ARGS: &quot;--encoding=UTF8&quot;&#10;    ports:&#10;      - &quot;5432:5432&quot;&#10;    volumes:&#10;      - postgres_data:/var/lib/postgresql/data&#10;    networks:&#10;      - restaurant_network&#10;    restart: unless-stopped&#10;    healthcheck:&#10;      test: [&quot;CMD-SHELL&quot;, &quot;pg_isready -U restaurant_user -d restaurant_management&quot;]&#10;      interval: 10s&#10;      timeout: 5s&#10;      retries: 5&#10;&#10;  # Database Migration Service&#10;  migrations:&#10;    image: postgres:15-alpine&#10;    container_name: restaurant_migrations&#10;    environment:&#10;      PGPASSWORD: restaurant_password&#10;    volumes:&#10;      - ./migrations:/migrations:ro&#10;    networks:&#10;      - restaurant_network&#10;    depends_on:&#10;      postgres:&#10;        condition: service_healthy&#10;    profiles:&#10;      - migrations&#10;    command: &gt;&#10;      sh -c &quot;&#10;        echo 'Waiting for database to be ready...';&#10;        sleep 5;&#10;        echo 'Creating fresh database for migrations...';&#10;        psql -h postgres -U restaurant_user -d postgres -c 'DROP DATABASE IF EXISTS restaurant_management_new;';&#10;        psql -h postgres -U restaurant_user -d postgres -c 'CREATE DATABASE restaurant_management_new;';&#10;        echo 'Running migrations on new database...';&#10;        for file in /migrations/*.sql; do&#10;          if [ -f \&quot;\$$file\&quot; ]; then&#10;            echo \&quot;Applying migration: \$$file\&quot;;&#10;            psql -h postgres -U restaurant_user -d restaurant_management_new -f \&quot;\$$file\&quot;;&#10;          fi;&#10;        done;&#10;        echo 'Migration completed successfully!';&#10;        echo 'New database: restaurant_management_new';&#10;      &quot;&#10;&#10;  # Restaurant Management Application&#10;  restaurant_app:&#10;    build:&#10;      context: .&#10;      dockerfile: Dockerfile&#10;    container_name: restaurant_management_app&#10;    environment:&#10;      - DB_HOST=postgres&#10;      - DB_PORT=5432&#10;      - DB_NAME=restaurant_management&#10;      - DB_USER=restaurant_user&#10;      - DB_PASSWORD=restaurant_password&#10;      - SIMULATION_MODE=true&#10;      - JAVA_OPTS=-Xmx512m -Xms256m&#10;    ports:&#10;      - &quot;8080:8080&quot;&#10;    depends_on:&#10;      postgres:&#10;        condition: service_healthy&#10;    networks:&#10;      - restaurant_network&#10;    restart: unless-stopped&#10;    stdin_open: true&#10;    tty: true&#10;    volumes:&#10;      - app_logs:/app/logs&#10;    command: [&quot;java&quot;, &quot;-jar&quot;, &quot;/app/app.jar&quot;, &quot;simulate&quot;]&#10;&#10;  # Authentication Simulation Service (separate profile)&#10;  auth_simulation:&#10;    build:&#10;      context: .&#10;      dockerfile: Dockerfile&#10;    container_name: restaurant_auth_simulation&#10;    environment:&#10;      - DB_HOST=postgres&#10;      - DB_PORT=5432&#10;      - DB_NAME=restaurant_management&#10;      - DB_USER=restaurant_user&#10;      - DB_PASSWORD=restaurant_password&#10;      - SIMULATION_MODE=true&#10;      - JAVA_OPTS=-Xmx512m -Xms256m&#10;    depends_on:&#10;      postgres:&#10;        condition: service_healthy&#10;    networks:&#10;      - restaurant_network&#10;    profiles:&#10;      - simulation&#10;    command: [&quot;java&quot;, &quot;-jar&quot;, &quot;/app/app.jar&quot;, &quot;simulate&quot;]&#10;&#10;  # Optional: PgAdmin for database management&#10;  pgadmin:&#10;    image: dpage/pgadmin4:latest&#10;    container_name: restaurant_pgadmin&#10;    environment:&#10;      PGADMIN_DEFAULT_EMAIL: admin@restaurant.com&#10;      PGADMIN_DEFAULT_PASSWORD: admin123&#10;      PGADMIN_CONFIG_SERVER_MODE: 'False'&#10;    ports:&#10;      - &quot;5050:80&quot;&#10;    depends_on:&#10;      - postgres&#10;    networks:&#10;      - restaurant_network&#10;    restart: unless-stopped&#10;    profiles:&#10;      - admin&#10;&#10;networks:&#10;  restaurant_network:&#10;    driver: bridge&#10;    name: restaurant_network&#10;&#10;volumes:&#10;  postgres_data:&#10;    driver: local&#10;    name: restaurant_postgres_data&#10;  app_logs:&#10;    driver: local&#10;    name: restaurant_app_logs&#10;" />
              <option name="updatedContent" value="version: '3.8'&#10;&#10;services:&#10;  # PostgreSQL Database&#10;  postgres:&#10;    image: postgres:15-alpine&#10;    container_name: restaurant_db&#10;    environment:&#10;      POSTGRES_USER: restaurant_user&#10;      POSTGRES_PASSWORD: restaurant_password&#10;      POSTGRES_DB: restaurant_management&#10;    ports:&#10;      - &quot;5432:5432&quot;&#10;    volumes:&#10;      - postgres_data:/var/lib/postgresql/data&#10;      - ./migrations:/docker-entrypoint-initdb.d&#10;    networks:&#10;      - restaurant_network&#10;    restart: unless-stopped&#10;    healthcheck:&#10;      test: [&quot;CMD-SHELL&quot;, &quot;pg_isready -U restaurant_user -d restaurant_management&quot;]&#10;      interval: 10s&#10;      timeout: 5s&#10;      retries: 5&#10;    command: postgres -c 'max_connections=200' -c 'shared_buffers=256MB'&#10;&#10;  # Restaurant Management Application&#10;  restaurant_app:&#10;    build:&#10;      context: .&#10;      dockerfile: Dockerfile&#10;    container_name: restaurant_management_app&#10;    environment:&#10;      - DB_HOST=postgres&#10;      - DB_PORT=5432&#10;      - DB_NAME=restaurant_management&#10;      - DB_USER=restaurant_user&#10;      - DB_PASSWORD=restaurant_password&#10;      - JAVA_OPTS=-Xmx512m -Xms256m&#10;      - TERM=xterm&#10;    ports:&#10;      - &quot;8080:8080&quot;&#10;    depends_on:&#10;      postgres:&#10;        condition: service_healthy&#10;    networks:&#10;      - restaurant_network&#10;    restart: unless-stopped&#10;    stdin_open: true  # docker run -i&#10;    tty: true         # docker run -t&#10;    volumes:&#10;      - app_logs:/app/logs&#10;      - ./src:/app/src:ro  # Mount source code for easy reference&#10;&#10;  # Optional: PgAdmin for database management&#10;  pgadmin:&#10;    image: dpage/pgadmin4:latest&#10;    container_name: restaurant_pgadmin&#10;    environment:&#10;      PGADMIN_DEFAULT_EMAIL: admin@restaurant.com&#10;      PGADMIN_DEFAULT_PASSWORD: admin123&#10;      PGADMIN_CONFIG_SERVER_MODE: 'False'&#10;    ports:&#10;      - &quot;5050:80&quot;&#10;    depends_on:&#10;      - postgres&#10;    networks:&#10;      - restaurant_network&#10;    restart: unless-stopped&#10;    profiles:&#10;      - admin&#10;&#10;networks:&#10;  restaurant_network:&#10;    driver: bridge&#10;    name: restaurant_network&#10;&#10;volumes:&#10;  postgres_data:&#10;    driver: local&#10;  app_logs:&#10;    driver: local" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/migrations/002_create_users_table.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/migrations/002_create_users_table.sql" />
              <option name="originalContent" value="-- Migration: Create users table&#10;CREATE TABLE IF NOT EXISTS users (&#10;    id SERIAL PRIMARY KEY,&#10;    username VARCHAR(100) NOT NULL UNIQUE,&#10;    email VARCHAR(100) NOT NULL UNIQUE,&#10;    password VARCHAR(255) NOT NULL,&#10;    role VARCHAR(20) NOT NULL CHECK (role IN ('admin', 'waiter', 'customer')),&#10;    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,&#10;    last_login TIMESTAMP WITH TIME ZONE&#10;);&#10;&#10;-- Create an admin user (password: admin123)&#10;INSERT INTO users (username, email, password, role)&#10;VALUES ('admin', 'ambatisaiteja123@gmail.com', '$2a$10$kK7yXYZNNJ/3MQyK.Qwc6ekhDiwcldY7.5e4qlJUFpiiXIQxbeBJO', 'admin')&#10;ON CONFLICT (email) DO NOTHING;&#10;&#10;-- Create waiter users (password: 12345678 for all)&#10;INSERT INTO users (username, email, password, role)&#10;VALUES&#10;    ('waiter1', 'waiter1@restaurant.com', '$2a$10$KS1TP5aH0ulsaHxODfvdveDpjGDjO7jlBs3KDGa8CigmJ2em1LC9G', 'waiter'),&#10;    ('waiter2', 'waiter2@restaurant.com', '$2a$10$KS1TP5aH0ulsaHxODfvdveDpjGDjO7jlBs3KDGa8CigmJ2em1LC9G', 'waiter'),&#10;    ('waiter3', 'waiter3@restaurant.com', '$2a$10$KS1TP5aH0ulsaHxODfvdveDpjGDjO7jlBs3KDGa8CigmJ2em1LC9G', 'waiter'),&#10;    ('waiter4', 'waiter4@restaurant.com', '$2a$10$KS1TP5aH0ulsaHxODfvdveDpjGDjO7jlBs3KDGa8CigmJ2em1LC9G', 'waiter'),&#10;    ('waiter5', 'waiter5@restaurant.com', '$2a$10$KS1TP5aH0ulsaHxODfvdveDpjGDjO7jlBs3KDGa8CigmJ2em1LC9G', 'waiter')&#10;ON CONFLICT (email) DO NOTHING;&#10;&#10;-- Create a sample customer&#10;INSERT INTO users (username, email, password, role)&#10;VALUES ('customer1', 'customer1@example.com', '$2a$10$KS1TP5aH0ulsaHxODfvdveDpjGDjO7jlBs3KDGa8CigmJ2em1LC9G', 'customer')&#10;ON CONFLICT (email) DO NOTHING;&#10;" />
              <option name="updatedContent" value="-- Migration: Create users table&#10;CREATE TABLE IF NOT EXISTS users (&#10;    id SERIAL PRIMARY KEY,&#10;    username VARCHAR(100) NOT NULL UNIQUE,&#10;    email VARCHAR(100) NOT NULL UNIQUE,&#10;    password VARCHAR(255) NOT NULL,&#10;    role VARCHAR(20) NOT NULL CHECK (role IN ('admin', 'waiter', 'customer')),&#10;    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,&#10;    last_login TIMESTAMP WITH TIME ZONE&#10;);&#10;&#10;-- Create an admin user (password in plain text)&#10;INSERT INTO users (username, email, password, role)&#10;VALUES ('admin', 'ambatisaiteja123@gmail.com', 'admin123', 'admin')&#10;ON CONFLICT (email) DO NOTHING;&#10;&#10;-- Create waiter users (password in plain text)&#10;INSERT INTO users (username, email, password, role)&#10;VALUES&#10;    ('waiter1', 'waiter1@restaurant.com', '12345678', 'waiter'),&#10;    ('waiter2', 'waiter2@restaurant.com', '12345678', 'waiter'),&#10;    ('waiter3', 'waiter3@restaurant.com', '12345678', 'waiter'),&#10;    ('waiter4', 'waiter4@restaurant.com', '12345678', 'waiter'),&#10;    ('waiter5', 'waiter5@restaurant.com', '12345678', 'waiter')&#10;ON CONFLICT (email) DO NOTHING;&#10;&#10;-- Create a sample customer&#10;INSERT INTO users (username, email, password, role)&#10;VALUES ('customer1', 'customer1@example.com', '12345678', 'customer')&#10;ON CONFLICT (email) DO NOTHING;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/migrations/init-db.sh">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/migrations/init-db.sh" />
              <option name="originalContent" value="#!/bin/bash&#10;set -e&#10;&#10;# Create database and users before migrations run&#10;psql -v ON_ERROR_STOP=1 --username &quot;$POSTGRES_USER&quot; --dbname &quot;$POSTGRES_DB&quot; &lt;&lt;-EOSQL&#10;    CREATE DATABASE restaurant_management;&#10;    CREATE USER restaurant_user WITH PASSWORD 'restaurant_password';&#10;    GRANT ALL PRIVILEGES ON DATABASE restaurant_management TO restaurant_user;&#10;EOSQL&#10;&#10;# Apply schema migrations to the restaurant_management database&#10;echo &quot;Running initial schema migrations...&quot;&#10;for f in /docker-entrypoint-initdb.d/*.sql; do&#10;  if [ -f &quot;\$f&quot; ]; then&#10;    echo &quot;Applying migration: \$f&quot;&#10;    psql -v ON_ERROR_STOP=1 --username &quot;$POSTGRES_USER&quot; --dbname restaurant_management -f &quot;\$f&quot;&#10;  fi&#10;done&#10;&#10;echo &quot;Database initialization completed successfully&quot;&#10;" />
              <option name="updatedContent" value="#!/bin/bash&#10;set -e&#10;&#10;echo &quot;Running database initialization script...&quot;&#10;&#10;# Apply all SQL migrations&#10;for file in /docker-entrypoint-initdb.d/*.sql; do&#10;  if [ -f &quot;$file&quot; ]; then&#10;    echo &quot;Applying migration: $file&quot;&#10;    psql -v ON_ERROR_STOP=1 --username &quot;$POSTGRES_USER&quot; --dbname &quot;$POSTGRES_DB&quot; -f &quot;$file&quot;&#10;    echo &quot;Migration $file applied successfully&quot;&#10;  fi&#10;done&#10;&#10;echo &quot;Database initialization completed successfully&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/pom.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/pom.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#10;    &lt;groupId&gt;zeta.foods&lt;/groupId&gt;&#10;    &lt;artifactId&gt;restaurant-management-system&lt;/artifactId&gt;&#10;    &lt;version&gt;1.0.0&lt;/version&gt;&#10;    &lt;packaging&gt;jar&lt;/packaging&gt;&#10;&#10;    &lt;name&gt;Restaurant Management System&lt;/name&gt;&#10;    &lt;description&gt;A Java-based Restaurant Management System with Firebase integration&lt;/description&gt;&#10;&#10;    &lt;properties&gt;&#10;        &lt;maven.compiler.source&gt;17&lt;/maven.compiler.source&gt;&#10;        &lt;maven.compiler.target&gt;17&lt;/maven.compiler.target&gt;&#10;        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;&#10;    &lt;/properties&gt;&#10;&#10;    &lt;dependencies&gt;&#10;        &lt;!-- Firebase Admin SDK --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.google.firebase&lt;/groupId&gt;&#10;            &lt;artifactId&gt;firebase-admin&lt;/artifactId&gt;&#10;            &lt;version&gt;9.2.0&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- PostgreSQL JDBC Driver --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;&#10;            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;            &lt;version&gt;42.6.0&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- JSON Processing --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.json&lt;/groupId&gt;&#10;            &lt;artifactId&gt;json&lt;/artifactId&gt;&#10;            &lt;version&gt;20230618&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Logging --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;&#10;            &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;&#10;            &lt;version&gt;2.0.7&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;&#10;            &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;&#10;            &lt;version&gt;1.4.8&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Test dependencies --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;&#10;            &lt;artifactId&gt;junit-jupiter&lt;/artifactId&gt;&#10;            &lt;version&gt;5.9.3&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&#10;    &lt;build&gt;&#10;        &lt;plugins&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;3.11.0&lt;/version&gt;&#10;                &lt;configuration&gt;&#10;                    &lt;source&gt;17&lt;/source&gt;&#10;                    &lt;target&gt;17&lt;/target&gt;&#10;                &lt;/configuration&gt;&#10;            &lt;/plugin&gt;&#10;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;3.4.1&lt;/version&gt;&#10;                &lt;executions&gt;&#10;                    &lt;execution&gt;&#10;                        &lt;phase&gt;package&lt;/phase&gt;&#10;                        &lt;goals&gt;&#10;                            &lt;goal&gt;shade&lt;/goal&gt;&#10;                        &lt;/goals&gt;&#10;                        &lt;configuration&gt;&#10;                            &lt;transformers&gt;&#10;                                &lt;transformer implementation=&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;&gt;&#10;                                    &lt;mainClass&gt;zeta.foods.Main&lt;/mainClass&gt;&#10;                                &lt;/transformer&gt;&#10;                            &lt;/transformers&gt;&#10;                        &lt;/configuration&gt;&#10;                    &lt;/execution&gt;&#10;                &lt;/executions&gt;&#10;            &lt;/plugin&gt;&#10;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;3.1.2&lt;/version&gt;&#10;            &lt;/plugin&gt;&#10;        &lt;/plugins&gt;&#10;    &lt;/build&gt;&#10;&lt;/project&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#10;    &lt;groupId&gt;zeta.foods&lt;/groupId&gt;&#10;    &lt;artifactId&gt;restaurant-management-system&lt;/artifactId&gt;&#10;    &lt;version&gt;1.0.0&lt;/version&gt;&#10;    &lt;packaging&gt;jar&lt;/packaging&gt;&#10;&#10;    &lt;name&gt;Restaurant Management System&lt;/name&gt;&#10;    &lt;description&gt;A Java-based Restaurant Management System with PostgreSQL integration&lt;/description&gt;&#10;&#10;    &lt;properties&gt;&#10;        &lt;maven.compiler.source&gt;17&lt;/maven.compiler.source&gt;&#10;        &lt;maven.compiler.target&gt;17&lt;/maven.compiler.target&gt;&#10;        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;&#10;    &lt;/properties&gt;&#10;&#10;    &lt;dependencies&gt;&#10;        &lt;!-- PostgreSQL JDBC Driver --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;&#10;            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;            &lt;version&gt;42.6.0&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- BCrypt for password hashing --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.mindrot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;jbcrypt&lt;/artifactId&gt;&#10;            &lt;version&gt;0.4&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- JSON Processing --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.json&lt;/groupId&gt;&#10;            &lt;artifactId&gt;json&lt;/artifactId&gt;&#10;            &lt;version&gt;20230618&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Logging --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;&#10;            &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;&#10;            &lt;version&gt;2.0.7&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;&#10;            &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;&#10;            &lt;version&gt;1.4.8&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Test dependencies --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;&#10;            &lt;artifactId&gt;junit-jupiter&lt;/artifactId&gt;&#10;            &lt;version&gt;5.9.3&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&#10;    &lt;build&gt;&#10;        &lt;plugins&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;3.11.0&lt;/version&gt;&#10;                &lt;configuration&gt;&#10;                    &lt;source&gt;17&lt;/source&gt;&#10;                    &lt;target&gt;17&lt;/target&gt;&#10;                &lt;/configuration&gt;&#10;            &lt;/plugin&gt;&#10;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;3.4.1&lt;/version&gt;&#10;                &lt;executions&gt;&#10;                    &lt;execution&gt;&#10;                        &lt;phase&gt;package&lt;/phase&gt;&#10;                        &lt;goals&gt;&#10;                            &lt;goal&gt;shade&lt;/goal&gt;&#10;                        &lt;/goals&gt;&#10;                        &lt;configuration&gt;&#10;                            &lt;filters&gt;&#10;                                &lt;filter&gt;&#10;                                    &lt;artifact&gt;*:*&lt;/artifact&gt;&#10;                                    &lt;excludes&gt;&#10;                                        &lt;exclude&gt;META-INF/*.SF&lt;/exclude&gt;&#10;                                        &lt;exclude&gt;META-INF/*.DSA&lt;/exclude&gt;&#10;                                        &lt;exclude&gt;META-INF/*.RSA&lt;/exclude&gt;&#10;                                        &lt;exclude&gt;META-INF/MANIFEST.MF&lt;/exclude&gt;&#10;                                    &lt;/excludes&gt;&#10;                                &lt;/filter&gt;&#10;                            &lt;/filters&gt;&#10;                            &lt;transformers&gt;&#10;                                &lt;transformer implementation=&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;&gt;&#10;                                    &lt;mainClass&gt;zeta.foods.Main&lt;/mainClass&gt;&#10;                                &lt;/transformer&gt;&#10;                                &lt;transformer implementation=&quot;org.apache.maven.plugins.shade.resource.ServicesResourceTransformer&quot;/&gt;&#10;                            &lt;/transformers&gt;&#10;                        &lt;/configuration&gt;&#10;                    &lt;/execution&gt;&#10;                &lt;/executions&gt;&#10;            &lt;/plugin&gt;&#10;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;3.1.2&lt;/version&gt;&#10;            &lt;/plugin&gt;&#10;        &lt;/plugins&gt;&#10;    &lt;/build&gt;&#10;&lt;/project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/zeta/foods/Main.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/zeta/foods/Main.java" />
              <option name="originalContent" value="package zeta.foods;&#10;&#10;import zeta.foods.config.FirebaseConfig;&#10;import zeta.foods.service.impl.FirebaseAuthServiceImpl;&#10;import com.google.firebase.auth.UserRecord;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;import java.util.Scanner;&#10;&#10;public class Main {&#10;    private static final Logger logger = LoggerFactory.getLogger(Main.class);&#10;    private static FirebaseAuthServiceImpl authService;&#10;&#10;    public static void main(String[] args) {&#10;        logger.info(&quot;Starting Restaurant Management System...&quot;);&#10;&#10;        try {&#10;            // Initialize Firebase&#10;            FirebaseConfig.initializeFirebase();&#10;            logger.info(&quot;Firebase initialized successfully&quot;);&#10;&#10;            // Initialize Auth Service&#10;            authService = new FirebaseAuthServiceImpl();&#10;            logger.info(&quot;Firebase Auth Service initialized&quot;);&#10;&#10;            // Print database connection info&#10;            String dbHost = System.getenv().getOrDefault(&quot;DB_HOST&quot;, &quot;localhost&quot;);&#10;            String dbPort = System.getenv().getOrDefault(&quot;DB_PORT&quot;, &quot;5432&quot;);&#10;            String dbName = System.getenv().getOrDefault(&quot;DB_NAME&quot;, &quot;restaurant_management&quot;);&#10;&#10;            logger.info(&quot;Database Configuration:&quot;);&#10;            logger.info(&quot;  Host: {}&quot;, dbHost);&#10;            logger.info(&quot;  Port: {}&quot;, dbPort);&#10;            logger.info(&quot;  Database: {}&quot;, dbName);&#10;&#10;            logger.info(&quot;Restaurant Management System is running successfully!&quot;);&#10;            logger.info(&quot;Application is ready to serve requests on port 8080&quot;);&#10;&#10;            // Start the login process&#10;            startLoginProcess();&#10;&#10;        } catch (Exception e) {&#10;            logger.error(&quot;Failed to start Restaurant Management System&quot;, e);&#10;            System.exit(1);&#10;        }&#10;    }&#10;&#10;    private static void startLoginProcess() {&#10;        logger.info(&quot;=== Restaurant Management System Login ===&quot;);&#10;        logger.info(&quot;Available test accounts:&quot;);&#10;        logger.info(&quot;Admin: ambatisaiteja123@gmail.com&quot;);&#10;        logger.info(&quot;Waiters: waiter1@restaurant.com, waiter2@restaurant.com, etc.&quot;);&#10;        logger.info(&quot;Password for all accounts: 12345678&quot;);&#10;&#10;        Scanner scanner = new Scanner(System.in);&#10;&#10;        while (true) {&#10;            try {&#10;                System.out.print(&quot;Enter email: &quot;);&#10;                String email = scanner.nextLine().trim();&#10;&#10;                System.out.print(&quot;Enter password: &quot;);&#10;                String password = scanner.nextLine().trim();&#10;&#10;                logger.info(&quot;Attempting authentication for: {}&quot;, email);&#10;&#10;                // Authenticate user&#10;                UserRecord user = authService.authenticateUser(email, password);&#10;&#10;                if (user != null) {&#10;                    logger.info(&quot;Authentication successful for: {}&quot;, email);&#10;&#10;                    if (authService.isAdmin(email)) {&#10;                        logger.info(&quot;Admin access granted&quot;);&#10;                        System.out.println(&quot;Welcome Admin! You have full access to the system.&quot;);&#10;                    } else if (authService.isWaiter(email)) {&#10;                        logger.info(&quot;Waiter access granted&quot;);&#10;                        System.out.println(&quot;Welcome Waiter! You can take orders and manage tables.&quot;);&#10;                    }&#10;&#10;                    // Keep the application running after successful login&#10;                    logger.info(&quot;System ready. Press Ctrl+C to exit.&quot;);&#10;                    Thread.currentThread().join();&#10;&#10;                } else {&#10;                    logger.warn(&quot;Authentication failed for: {}&quot;, email);&#10;                    System.out.println(&quot;Invalid credentials. Please try again.&quot;);&#10;                }&#10;&#10;            } catch (Exception e) {&#10;                logger.error(&quot;Error during login process&quot;, e);&#10;                System.out.println(&quot;An error occurred. Please try again.&quot;);&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package zeta.foods;&#10;&#10;import zeta.foods.model.User;&#10;import zeta.foods.service.AuthService;&#10;import zeta.foods.service.impl.PostgresAuthServiceImpl;&#10;import zeta.foods.simulation.AuthSimulation;&#10;import zeta.foods.utils.DatabaseUtil;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;import java.util.Scanner;&#10;&#10;public class Main {&#10;    private static final Logger logger = LoggerFactory.getLogger(Main.class);&#10;    private static AuthService authService;&#10;&#10;    public static void main(String[] args) {&#10;        logger.info(&quot;Starting Restaurant Management System...&quot;);&#10;&#10;        try {&#10;            // Print database connection info&#10;            String dbHost = System.getenv().getOrDefault(&quot;DB_HOST&quot;, &quot;localhost&quot;);&#10;            String dbPort = System.getenv().getOrDefault(&quot;DB_PORT&quot;, &quot;5432&quot;);&#10;            String dbName = System.getenv().getOrDefault(&quot;DB_NAME&quot;, &quot;restaurant_management&quot;);&#10;&#10;            logger.info(&quot;Database Configuration:&quot;);&#10;            logger.info(&quot;  Host: {}&quot;, dbHost);&#10;            logger.info(&quot;  Port: {}&quot;, dbPort);&#10;            logger.info(&quot;  Database: {}&quot;, dbName);&#10;            &#10;            // Check for simulation mode from command line or environment&#10;            boolean simulationMode = Boolean.parseBoolean(System.getenv().getOrDefault(&quot;SIMULATION_MODE&quot;, &quot;false&quot;));&#10;            if (args.length &gt; 0 &amp;&amp; &quot;simulate&quot;.equalsIgnoreCase(args[0])) {&#10;                simulationMode = true;&#10;            }&#10;&#10;            // Test database connection&#10;            DatabaseUtil.getConnection();&#10;            logger.info(&quot;Database connection successful&quot;);&#10;&#10;            // Initialize Auth Service&#10;            authService = new PostgresAuthServiceImpl();&#10;            logger.info(&quot;PostgreSQL Auth Service initialized&quot;);&#10;&#10;            logger.info(&quot;Restaurant Management System is running successfully!&quot;);&#10;            logger.info(&quot;Application is ready to serve requests on port 8080&quot;);&#10;&#10;            // Run simulation or interactive mode&#10;            if (simulationMode) {&#10;                runSimulation();&#10;            } else {&#10;                startLoginProcess();&#10;            }&#10;&#10;        } catch (Exception e) {&#10;            logger.error(&quot;Failed to start Restaurant Management System&quot;, e);&#10;            System.exit(1);&#10;        }&#10;    }&#10;    &#10;    private static void runSimulation() {&#10;        logger.info(&quot;=== Starting Authentication Simulation Mode ===&quot;);&#10;        AuthSimulation simulation = new AuthSimulation(authService);&#10;        simulation.runLoginSimulation();&#10;        &#10;        // Close database connection when finished&#10;        DatabaseUtil.closeConnection();&#10;        logger.info(&quot;Simulation completed. Exiting application.&quot;);&#10;    }&#10;&#10;    private static void startLoginProcess() {&#10;        logger.info(&quot;=== Restaurant Management System Login ===&quot;);&#10;        logger.info(&quot;Available test accounts:&quot;);&#10;        logger.info(&quot;Admin: ambatisaiteja123@gmail.com (password: admin123)&quot;);&#10;        logger.info(&quot;Waiters: waiter1@restaurant.com through waiter5@restaurant.com (password: 12345678)&quot;);&#10;        logger.info(&quot;Customer: customer1@example.com (password: 12345678)&quot;);&#10;        logger.info(&quot;Type 'simulate' to run automatic login simulation&quot;);&#10;        logger.info(&quot;Type 'exit' to quit the application&quot;);&#10;        &#10;        try {&#10;            // Use the enhanced console login method which is more reliable in Docker&#10;            PostgresAuthServiceImpl authServiceImpl = (PostgresAuthServiceImpl) authService;&#10;            User user = authServiceImpl.consoleLogin();&#10;            &#10;            if (user == null) {&#10;                // Check if simulation was requested through the console login&#10;                if (&quot;simulate&quot;.equalsIgnoreCase(System.getenv().getOrDefault(&quot;LAST_COMMAND&quot;, &quot;&quot;))) {&#10;                    runSimulation();&#10;                }&#10;            }&#10;            &#10;            // Keep application running until user selects exit&#10;            Scanner scanner = new Scanner(System.in);&#10;            boolean running = user != null;&#10;            &#10;            while (running) {&#10;                String input = scanner.nextLine().trim();&#10;                &#10;                if (&quot;0&quot;.equals(input) || &quot;exit&quot;.equalsIgnoreCase(input)) {&#10;                    logger.info(&quot;Logging out and exiting application&quot;);&#10;                    running = false;&#10;                } else {&#10;                    // Handle menu selection based on user role&#10;                    logger.info(&quot;Selected option: {}&quot;, input);&#10;                    System.out.println(&quot;Processing your request...&quot;);&#10;                    System.out.println(&quot;Feature will be implemented in future updates.&quot;);&#10;                    System.out.print(&quot;Enter another option (0 to exit): &quot;);&#10;                }&#10;            }&#10;            &#10;            scanner.close();&#10;        } catch (Exception e) {&#10;            logger.error(&quot;Error during login process: {}&quot;, e.getMessage(), e);&#10;        } finally {&#10;            // Close database connection when app exits&#10;            DatabaseUtil.closeConnection();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/zeta/foods/config/FirebaseConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/zeta/foods/config/FirebaseConfig.java" />
              <option name="originalContent" value="package zeta.foods.config;&#10;&#10;import com.google.auth.oauth2.GoogleCredentials;&#10;import com.google.firebase.FirebaseApp;&#10;import com.google.firebase.FirebaseOptions;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;&#10;public class FirebaseConfig {&#10;    private static final Logger logger = LoggerFactory.getLogger(FirebaseConfig.class);&#10;&#10;    public static void initializeFirebase() {&#10;        try {&#10;            if (FirebaseApp.getApps().isEmpty()) {&#10;                logger.info(&quot;Initializing Firebase in test mode...&quot;);&#10;&#10;                // For development/testing purposes, we'll initialize Firebase with empty credentials&#10;                FirebaseOptions options = FirebaseOptions.builder()&#10;                        .setCredentials(GoogleCredentials.fromAccessToken(&quot;test-token&quot;)) // Use dummy token for test mode&#10;                        .setProjectId(&quot;login-4e5bf&quot;)&#10;                        .setDatabaseUrl(&quot;https://login-4e5bf-default-rtdb.firebaseio.com&quot;)&#10;                        .build();&#10;&#10;                FirebaseApp.initializeApp(options);&#10;                logger.info(&quot;Firebase initialized successfully in test mode&quot;);&#10;            } else {&#10;                logger.info(&quot;Firebase app already initialized&quot;);&#10;            }&#10;        } catch (Exception e) {&#10;            logger.error(&quot;Error initializing Firebase: {}&quot;, e.getMessage(), e);&#10;            throw new RuntimeException(&quot;Failed to initialize Firebase&quot;, e);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package zeta.foods.config;&#10;&#10;import com.google.auth.oauth2.GoogleCredentials;&#10;import com.google.firebase.FirebaseApp;&#10;import com.google.firebase.FirebaseOptions;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;&#10;public class FirebaseConfig {&#10;    private static final Logger logger = LoggerFactory.getLogger(FirebaseConfig.class);&#10;&#10;    public static void initializeFirebase() {&#10;        try {&#10;            if (FirebaseApp.getApps().isEmpty()) {&#10;                logger.info(&quot;Initializing Firebase...&quot;);&#10;&#10;                // Using the Firebase credentials provided&#10;                FirebaseOptions options = FirebaseOptions.builder()&#10;                        .setApiKey(&quot;AIzaSyBc_5c_kifHsQpJl43kgMlTLciTTkCEJ9w&quot;)&#10;                        .setProjectId(&quot;login-4e5bf&quot;)&#10;                        .setDatabaseUrl(&quot;https://login-4e5bf-default-rtdb.firebaseio.com&quot;)&#10;                        .setStorageBucket(&quot;login-4e5bf.firebasestorage.app&quot;)&#10;                        .setApplicationId(&quot;1:492624027559:web:55d0e912122375822aa082&quot;)&#10;                        // Create empty credentials for testing environment&#10;                        .setCredentials(GoogleCredentials.create(null))&#10;                        .build();&#10;&#10;                FirebaseApp.initializeApp(options);&#10;                logger.info(&quot;Firebase initialized successfully&quot;);&#10;            } else {&#10;                logger.info(&quot;Firebase app already initialized&quot;);&#10;            }&#10;        } catch (Exception e) {&#10;            logger.error(&quot;Error initializing Firebase: {}&quot;, e.getMessage(), e);&#10;            logger.info(&quot;Continuing without Firebase initialization&quot;);&#10;            // Don't throw exception - allow the application to continue without Firebase&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/zeta/foods/model/User.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/zeta/foods/model/User.java" />
              <option name="updatedContent" value="package zeta.foods.model;&#10;&#10;import java.time.ZonedDateTime;&#10;&#10;public class User {&#10;    private Long id;&#10;    private String username;&#10;    private String email;&#10;    private String password; // Stored as hashed&#10;    private String role; // &quot;admin&quot;, &quot;waiter&quot;, or &quot;customer&quot;&#10;    private ZonedDateTime createdAt;&#10;    private ZonedDateTime lastLogin;&#10;&#10;    // Constructors&#10;    public User() {}&#10;    &#10;    public User(Long id, String username, String email, String password, String role) {&#10;        this.id = id;&#10;        this.username = username;&#10;        this.email = email;&#10;        this.password = password;&#10;        this.role = role;&#10;    }&#10;&#10;    // Getters and Setters&#10;    public Long getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(Long id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getUsername() {&#10;        return username;&#10;    }&#10;&#10;    public void setUsername(String username) {&#10;        this.username = username;&#10;    }&#10;&#10;    public String getEmail() {&#10;        return email;&#10;    }&#10;&#10;    public void setEmail(String email) {&#10;        this.email = email;&#10;    }&#10;&#10;    public String getPassword() {&#10;        return password;&#10;    }&#10;&#10;    public void setPassword(String password) {&#10;        this.password = password;&#10;    }&#10;&#10;    public String getRole() {&#10;        return role;&#10;    }&#10;&#10;    public void setRole(String role) {&#10;        this.role = role;&#10;    }&#10;&#10;    public ZonedDateTime getCreatedAt() {&#10;        return createdAt;&#10;    }&#10;&#10;    public void setCreatedAt(ZonedDateTime createdAt) {&#10;        this.createdAt = createdAt;&#10;    }&#10;&#10;    public ZonedDateTime getLastLogin() {&#10;        return lastLogin;&#10;    }&#10;&#10;    public void setLastLogin(ZonedDateTime lastLogin) {&#10;        this.lastLogin = lastLogin;&#10;    }&#10;    &#10;    public boolean isAdmin() {&#10;        return &quot;admin&quot;.equals(role);&#10;    }&#10;    &#10;    public boolean isWaiter() {&#10;        return &quot;waiter&quot;.equals(role);&#10;    }&#10;    &#10;    public boolean isCustomer() {&#10;        return &quot;customer&quot;.equals(role);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/zeta/foods/service/AuthService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/zeta/foods/service/AuthService.java" />
              <option name="updatedContent" value="package zeta.foods.service;&#10;&#10;import zeta.foods.model.User;&#10;&#10;public interface AuthService {&#10;    /**&#10;     * Authenticate a user with email and password&#10;     * @param email User's email&#10;     * @param password User's password&#10;     * @return User if authentication successful, null otherwise&#10;     */&#10;    User authenticateUser(String email, String password);&#10;    &#10;    /**&#10;     * Check if a user is an admin&#10;     * @param email User's email&#10;     * @return true if admin, false otherwise&#10;     */&#10;    boolean isAdmin(String email);&#10;    &#10;    /**&#10;     * Check if a user is a waiter&#10;     * @param email User's email&#10;     * @return true if waiter, false otherwise&#10;     */&#10;    boolean isWaiter(String email);&#10;    &#10;    /**&#10;     * Create a new user account&#10;     * @param username Username&#10;     * @param email Email&#10;     * @param password Password (will be hashed)&#10;     * @param role Role (admin, waiter, customer)&#10;     * @return Created user or null if creation failed&#10;     */&#10;    User createUser(String username, String email, String password, String role);&#10;    &#10;    /**&#10;     * Updates the last login time for a user&#10;     * @param userId The user ID&#10;     * @return true if successful, false otherwise&#10;     */&#10;    boolean updateLastLogin(Long userId);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/zeta/foods/service/FirebaseAuthService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/zeta/foods/service/FirebaseAuthService.java" />
              <option name="originalContent" value="package zeta.foods.service;&#10;&#10;import java.util.Map;&#10;import java.util.HashMap;&#10;import java.util.concurrent.ExecutionException;&#10;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.auth.FirebaseAuthException;&#10;import com.google.firebase.auth.UserRecord;&#10;import com.google.firebase.auth.UserRecord.CreateRequest;&#10;&#10;public interface FirebaseAuthService {&#10;    /**&#10;     * Authenticate a user with email and password&#10;     * @param email User's email&#10;     * @param password User's password&#10;     * @return UserRecord if authentication successful, null otherwise&#10;     */&#10;    UserRecord authenticateUser(String email, String password);&#10;&#10;    /**&#10;     * Check if the user is an admin&#10;     * @param email User's email&#10;     * @return true if admin, false otherwise&#10;     */&#10;    boolean isAdmin(String email);&#10;&#10;    /**&#10;     * Check if the user is a waiter&#10;     * @param email User's email&#10;     * @return true if waiter, false otherwise&#10;     */&#10;    boolean isWaiter(String email);&#10;&#10;    /**&#10;     * Create a new user&#10;     * @param email User's email&#10;     * @param password User's password&#10;     * @param isAdmin Whether the user is an admin&#10;     * @return UserRecord of created user&#10;     */&#10;    UserRecord createUser(String email, String password, boolean isAdmin);&#10;}&#10;" />
              <option name="updatedContent" value="package zeta.foods.service;&#10;&#10;import zeta.foods.model.User;&#10;&#10;public interface AuthService {&#10;    /**&#10;     * Authenticate a user with email and password&#10;     * @param email User's email&#10;     * @param password User's password&#10;     * @return User if authentication successful, null otherwise&#10;     */&#10;    User authenticateUser(String email, String password);&#10;    &#10;    /**&#10;     * Check if a user is an admin&#10;     * @param email User's email&#10;     * @return true if admin, false otherwise&#10;     */&#10;    boolean isAdmin(String email);&#10;    &#10;    /**&#10;     * Check if a user is a waiter&#10;     * @param email User's email&#10;     * @return true if waiter, false otherwise&#10;     */&#10;    boolean isWaiter(String email);&#10;    &#10;    /**&#10;     * Create a new user account&#10;     * @param username Username&#10;     * @param email Email&#10;     * @param password Password (will be hashed)&#10;     * @param role Role (admin, waiter, customer)&#10;     * @return Created user or null if creation failed&#10;     */&#10;    User createUser(String username, String email, String password, String role);&#10;    &#10;    /**&#10;     * Updates the last login time for a user&#10;     * @param userId The user ID&#10;     * @return true if successful, false otherwise&#10;     */&#10;    boolean updateLastLogin(Long userId);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/zeta/foods/service/impl/FirebaseAuthServiceImpl.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/zeta/foods/service/impl/FirebaseAuthServiceImpl.java" />
              <option name="originalContent" value="package zeta.foods.service.impl;&#10;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.auth.FirebaseAuthException;&#10;import com.google.firebase.auth.UserRecord;&#10;import com.google.firebase.auth.UserRecord.CreateRequest;&#10;import zeta.foods.service.FirebaseAuthService;&#10;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;public class FirebaseAuthServiceImpl implements FirebaseAuthService {&#10;&#10;    private static final String ADMIN_EMAIL = &quot;ambatisaiteja123@gmail.com&quot;;&#10;&#10;    // Predefined waiter accounts&#10;    private static final Map&lt;String, String&gt; WAITERS = new HashMap&lt;&gt;();&#10;&#10;    static {&#10;        // Initialize waiters with email and password &quot;12345678&quot;&#10;        WAITERS.put(&quot;waiter1@restaurant.com&quot;, &quot;12345678&quot;);&#10;        WAITERS.put(&quot;waiter2@restaurant.com&quot;, &quot;12345678&quot;);&#10;        WAITERS.put(&quot;waiter3@restaurant.com&quot;, &quot;12345678&quot;);&#10;        WAITERS.put(&quot;waiter4@restaurant.com&quot;, &quot;12345678&quot;);&#10;        WAITERS.put(&quot;waiter5@restaurant.com&quot;, &quot;12345678&quot;);&#10;    }&#10;&#10;    @Override&#10;    public UserRecord authenticateUser(String email, String password) {&#10;        try {&#10;            // For admin authentication&#10;            if (email.equals(ADMIN_EMAIL) || WAITERS.containsKey(email)) {&#10;                // In real implementation, this would verify the password with Firebase&#10;                // Here we're just checking if it's a known user&#10;                return FirebaseAuth.getInstance().getUserByEmail(email);&#10;            }&#10;            return null;&#10;        } catch (FirebaseAuthException e) {&#10;            System.err.println(&quot;Authentication failed: &quot; + e.getMessage());&#10;            return null;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean isAdmin(String email) {&#10;        return email.equals(ADMIN_EMAIL);&#10;    }&#10;&#10;    @Override&#10;    public boolean isWaiter(String email) {&#10;        return WAITERS.containsKey(email);&#10;    }&#10;&#10;    @Override&#10;    public UserRecord createUser(String email, String password, boolean isAdmin) {&#10;        CreateRequest request = new CreateRequest()&#10;                .setEmail(email)&#10;                .setPassword(password)&#10;                .setEmailVerified(true);&#10;&#10;        try {&#10;            UserRecord userRecord = FirebaseAuth.getInstance().createUser(request);&#10;&#10;            // Add custom claims for role-based access&#10;            Map&lt;String, Object&gt; claims = new HashMap&lt;&gt;();&#10;            claims.put(&quot;admin&quot;, isAdmin);&#10;            claims.put(&quot;waiter&quot;, !isAdmin);&#10;&#10;            FirebaseAuth.getInstance().setCustomUserClaims(userRecord.getUid(), claims);&#10;&#10;            return userRecord;&#10;        } catch (FirebaseAuthException e) {&#10;            System.err.println(&quot;Error creating user: &quot; + e.getMessage());&#10;            return null;&#10;        }&#10;    }&#10;&#10;    // Method to create predefined users if they don't exist&#10;    public void setupPredefinedUsers() {&#10;        try {&#10;            // Try to create admin&#10;            try {&#10;                FirebaseAuth.getInstance().getUserByEmail(ADMIN_EMAIL);&#10;            } catch (FirebaseAuthException e) {&#10;                // User doesn't exist, create it&#10;                createUser(ADMIN_EMAIL, &quot;admin123&quot;, true);&#10;                System.out.println(&quot;Created admin user: &quot; + ADMIN_EMAIL);&#10;            }&#10;&#10;            // Create waiter accounts&#10;            for (String waiterEmail : WAITERS.keySet()) {&#10;                try {&#10;                    FirebaseAuth.getInstance().getUserByEmail(waiterEmail);&#10;                } catch (FirebaseAuthException e) {&#10;                    // User doesn't exist, create it&#10;                    createUser(waiterEmail, WAITERS.get(waiterEmail), false);&#10;                    System.out.println(&quot;Created waiter user: &quot; + waiterEmail);&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error setting up predefined users: &quot; + e.getMessage());&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package zeta.foods.service.impl;&#10;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.auth.FirebaseAuthException;&#10;import com.google.firebase.auth.UserRecord;&#10;import com.google.firebase.auth.UserRecord.CreateRequest;&#10;import zeta.foods.service.FirebaseAuthService;&#10;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;public class FirebaseAuthServiceImpl implements FirebaseAuthService {&#10;&#10;    private static final String ADMIN_EMAIL = &quot;ambatisaiteja123@gmail.com&quot;;&#10;&#10;    // Predefined waiter accounts&#10;    private static final Map&lt;String, String&gt; WAITERS = new HashMap&lt;&gt;();&#10;&#10;    static {&#10;        // Initialize waiters with email and password &quot;12345678&quot;&#10;        WAITERS.put(&quot;waiter1@restaurant.com&quot;, &quot;12345678&quot;);&#10;        WAITERS.put(&quot;waiter2@restaurant.com&quot;, &quot;12345678&quot;);&#10;        WAITERS.put(&quot;waiter3@restaurant.com&quot;, &quot;12345678&quot;);&#10;        WAITERS.put(&quot;waiter4@restaurant.com&quot;, &quot;12345678&quot;);&#10;        WAITERS.put(&quot;waiter5@restaurant.com&quot;, &quot;12345678&quot;);&#10;    }&#10;&#10;    @Override&#10;    public UserRecord authenticateUser(String email, String password) {&#10;        try {&#10;            // For test mode, we'll simulate authentication with predefined accounts&#10;            if ((email.equals(ADMIN_EMAIL) || WAITERS.containsKey(email)) &amp;&amp;&#10;                    password.equals(&quot;12345678&quot;)) {&#10;&#10;                // Create a mock UserRecord for testing purposes&#10;                // In production, this would verify with Firebase&#10;                System.out.println(&quot;Test authentication successful for: &quot; + email);&#10;                return createMockUserRecord(email);&#10;            }&#10;            return null;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Authentication failed: &quot; + e.getMessage());&#10;            return null;&#10;        }&#10;    }&#10;&#10;    private UserRecord createMockUserRecord(String email) {&#10;        // Use anonymous class to create a mock UserRecord&#10;        return new UserRecord() {&#10;            @Override&#10;            public String getUid() {&#10;                return &quot;test-uid-&quot; + email.hashCode();&#10;            }&#10;&#10;            @Override&#10;            public String getEmail() {&#10;                return email;&#10;            }&#10;&#10;            @Override&#10;            public boolean isEmailVerified() {&#10;                return true;&#10;            }&#10;&#10;            // Implement other required methods with defaults&#10;            @Override&#10;            public String getDisplayName() {&#10;                return null;&#10;            }&#10;&#10;            @Override&#10;            public String getPhotoUrl() {&#10;                return null;&#10;            }&#10;&#10;            @Override&#10;            public String getPhoneNumber() {&#10;                return null;&#10;            }&#10;&#10;            @Override&#10;            public boolean isDisabled() {&#10;                return false;&#10;            }&#10;&#10;            @Override&#10;            public UserRecord.UserMetadata getUserMetadata() {&#10;                return new UserRecord.UserMetadata(System.currentTimeMillis(), System.currentTimeMillis());&#10;            }&#10;&#10;            @Override&#10;            public UserRecord.ProviderUserInfo[] getProviderData() {&#10;                return new UserRecord.ProviderUserInfo[0];&#10;            }&#10;&#10;            @Override&#10;            public Map&lt;String, Object&gt; getCustomClaims() {&#10;                return new HashMap&lt;&gt;();&#10;            }&#10;&#10;            @Override&#10;            public long getTokensValidAfterTimestamp() {&#10;                return 0;&#10;            }&#10;&#10;            @Override&#10;            public String getTenantId() {&#10;                return null;&#10;            }&#10;        };&#10;    }&#10;&#10;    @Override&#10;    public boolean isAdmin(String email) {&#10;        return email.equals(ADMIN_EMAIL);&#10;    }&#10;&#10;    @Override&#10;    public boolean isWaiter(String email) {&#10;        return WAITERS.containsKey(email);&#10;    }&#10;&#10;    @Override&#10;    public UserRecord createUser(String email, String password, boolean isAdmin) {&#10;        CreateRequest request = new CreateRequest()&#10;                .setEmail(email)&#10;                .setPassword(password)&#10;                .setEmailVerified(true);&#10;&#10;        try {&#10;            UserRecord userRecord = FirebaseAuth.getInstance().createUser(request);&#10;&#10;            // Add custom claims for role-based access&#10;            Map&lt;String, Object&gt; claims = new HashMap&lt;&gt;();&#10;            claims.put(&quot;admin&quot;, isAdmin);&#10;            claims.put(&quot;waiter&quot;, !isAdmin);&#10;&#10;            FirebaseAuth.getInstance().setCustomUserClaims(userRecord.getUid(), claims);&#10;&#10;            return userRecord;&#10;        } catch (FirebaseAuthException e) {&#10;            System.err.println(&quot;Error creating user: &quot; + e.getMessage());&#10;            return null;&#10;        }&#10;    }&#10;&#10;    // Method to create predefined users if they don't exist&#10;    public void setupPredefinedUsers() {&#10;        try {&#10;            // Try to create admin&#10;            try {&#10;                FirebaseAuth.getInstance().getUserByEmail(ADMIN_EMAIL);&#10;            } catch (FirebaseAuthException e) {&#10;                // User doesn't exist, create it&#10;                createUser(ADMIN_EMAIL, &quot;admin123&quot;, true);&#10;                System.out.println(&quot;Created admin user: &quot; + ADMIN_EMAIL);&#10;            }&#10;&#10;            // Create waiter accounts&#10;            for (String waiterEmail : WAITERS.keySet()) {&#10;                try {&#10;                    FirebaseAuth.getInstance().getUserByEmail(waiterEmail);&#10;                } catch (FirebaseAuthException e) {&#10;                    // User doesn't exist, create it&#10;                    createUser(waiterEmail, WAITERS.get(waiterEmail), false);&#10;                    System.out.println(&quot;Created waiter user: &quot; + waiterEmail);&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error setting up predefined users: &quot; + e.getMessage());&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/zeta/foods/service/impl/PostgresAuthServiceImpl.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/zeta/foods/service/impl/PostgresAuthServiceImpl.java" />
              <option name="originalContent" value="package zeta.foods.service.impl;&#10;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;import zeta.foods.model.User;&#10;import zeta.foods.service.AuthService;&#10;import zeta.foods.utils.DatabaseUtil;&#10;&#10;import java.sql.*;&#10;import java.util.Scanner;&#10;&#10;public class PostgresAuthServiceImpl implements AuthService {&#10;    private static final Logger logger = LoggerFactory.getLogger(PostgresAuthServiceImpl.class);&#10;&#10;    @Override&#10;    public User authenticateUser(String email, String password) {&#10;        // Log authentication attempt but mask password for security&#10;        logger.info(&quot;Attempting to authenticate user: '{}'&quot;, email);&#10;        logger.info(&quot;Password length: {}, Password value: '{}'&quot;, password != null ? password.length() : &quot;null&quot;, password);&#10;&#10;        // Print each character code to check for hidden/special characters&#10;        if (password != null) {&#10;            StringBuilder charCodes = new StringBuilder(&quot;Password char codes: &quot;);&#10;            for (char c : password.toCharArray()) {&#10;                charCodes.append((int)c).append(&quot;,&quot;);&#10;            }&#10;            logger.info(charCodes.toString());&#10;        }&#10;&#10;        // Debug: directly check if user exists with this exact email and password&#10;        try (Connection debugConn = DatabaseUtil.getConnection();&#10;             Statement debugStmt = debugConn.createStatement()) {&#10;&#10;            // First get all users matching the email only&#10;            String emailOnlyQuery = &quot;SELECT * FROM users WHERE email = '&quot; + email + &quot;'&quot;;&#10;            try (ResultSet emailRs = debugStmt.executeQuery(emailOnlyQuery)) {&#10;                if (emailRs.next()) {&#10;                    String dbEmail = emailRs.getString(&quot;email&quot;);&#10;                    String dbPassword = emailRs.getString(&quot;password&quot;);&#10;&#10;                    logger.info(&quot;Found user with email: '{}', DB password: '{}'&quot;, dbEmail, dbPassword);&#10;                    logger.info(&quot;Password length from DB: {}&quot;, dbPassword.length());&#10;&#10;                    // Print each character code of DB password&#10;                    StringBuilder dbCharCodes = new StringBuilder(&quot;DB Password char codes: &quot;);&#10;                    for (char c : dbPassword.toCharArray()) {&#10;                        dbCharCodes.append((int)c).append(&quot;,&quot;);&#10;                    }&#10;                    logger.info(dbCharCodes.toString());&#10;&#10;                    // Direct character-by-character comparison&#10;                    logger.info(&quot;Direct password comparison result: {}&quot;, dbPassword.equals(password));&#10;&#10;                    if (!dbPassword.equals(password)) {&#10;                        logger.info(&quot;Password mismatch details:&quot;);&#10;                        if (dbPassword.length() != password.length()) {&#10;                            logger.info(&quot;Length differs: DB={}, Input={}&quot;, dbPassword.length(), password.length());&#10;                        } else {&#10;                            for (int i = 0; i &lt; dbPassword.length(); i++) {&#10;                                if (dbPassword.charAt(i) != password.charAt(i)) {&#10;                                    logger.info(&quot;Mismatch at position {}: DB='{}' ({}), Input='{}' ({})&quot;,&#10;                                        i, dbPassword.charAt(i), (int)dbPassword.charAt(i),&#10;                                        password.charAt(i), (int)password.charAt(i));&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                } else {&#10;                    logger.warn(&quot;No user found with email: '{}'&quot;, email);&#10;                }&#10;            }&#10;&#10;            // Now try the full authentication query&#10;//            String debugQuery = &quot;SELECT * FROM users WHERE email = '&quot; + email + &quot;' AND password = '&quot; + password + &quot;'&quot;;&#10;            String debugQuery = &quot;SELECT * FROM users WHERE email = ambatisaiteja123@gmail.com AND password = admin123&quot;;&#10;            logger.info(&quot;Executing direct query: {}&quot;, debugQuery);&#10;&#10;&#10;            try (ResultSet debugRs = debugStmt.executeQuery(debugQuery)) {&#10;                if (debugRs.next()) {&#10;                    logger.info(&quot;DEBUG - Direct query found matching user!&quot;);&#10;                } else {&#10;                    logger.warn(&quot;DEBUG - Direct query found NO matching user!&quot;);&#10;                }&#10;            }&#10;        } catch (SQLException e) {&#10;            logger.error(&quot;DEBUG - Error in diagnostic queries: {}&quot;, e.getMessage());&#10;        }&#10;&#10;        String sql = &quot;SELECT * FROM users WHERE email = ? AND password = ?&quot;;&#10;&#10;        logger.info(&quot;Preparing to execute authentication query for email: {}, password: {}&quot;, email, password);&#10;        try (Connection conn = DatabaseUtil.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setString(1, email);&#10;            stmt.setString(2, password);&#10;            logger.debug(&quot;Executing authentication query for email: {}&quot;, email);&#10;&#10;            try (ResultSet rs = stmt.executeQuery()) {&#10;                if (rs.next()) {&#10;                    User user = new User();&#10;                    user.setId(rs.getLong(&quot;id&quot;));&#10;                    user.setUsername(rs.getString(&quot;username&quot;));&#10;                    user.setEmail(rs.getString(&quot;email&quot;));&#10;                    user.setRole(rs.getString(&quot;role&quot;));&#10;&#10;                    // Update last login time&#10;                    updateLastLogin(user.getId());&#10;&#10;                    logger.info(&quot;User authenticated successfully: {}&quot;, email);&#10;                    return user;&#10;                } else {&#10;                    logger.warn(&quot;No user found with email: {} and provided password&quot;, email);&#10;                }&#10;            }&#10;&#10;            logger.warn(&quot;Authentication failed for user: {}&quot;, email);&#10;            return null;&#10;&#10;        } catch (SQLException e) {&#10;            logger.error(&quot;Database error during authentication: {}&quot;, e.getMessage(), e);&#10;            return null;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Interactive console login method that handles the scanner input directly&#10;     * This is useful when running in Docker or other environments where&#10;     * standard input handling might be tricky&#10;     */&#10;    public User consoleLogin() {&#10;        // Use System.console() if available, otherwise fall back to Scanner&#10;        User authenticatedUser = null;&#10;        int attempts = 0;&#10;        final int MAX_ATTEMPTS = 3;&#10;&#10;        // Print a visual separator to make the prompt more visible&#10;        System.out.println(&quot;\n*************************************&quot;);&#10;        System.out.println(&quot;*          LOGIN PROMPT             *&quot;);&#10;        System.out.println(&quot;*************************************\n&quot;);&#10;&#10;        while (attempts &lt; MAX_ATTEMPTS &amp;&amp; authenticatedUser == null) {&#10;            try {&#10;                String email = null;&#10;                String password = null;&#10;&#10;                // Try to use console if available (better for password input)&#10;                if (System.console() != null) {&#10;                    System.out.print(&quot;Enter email: &quot;);&#10;                    email = System.console().readLine();&#10;                    System.out.print(&quot;Enter password: &quot;);&#10;                    password = new String(System.console().readLine());&#10;                } else {&#10;                    // Fall back to Scanner with flush to ensure prompt is visible&#10;                    Scanner scanner = new Scanner(System.in);&#10;                    System.out.print(&quot;Enter email: &quot;);&#10;                    System.out.flush();&#10;                    email = scanner.nextLine().trim();&#10;&#10;                    System.out.print(&quot;Enter password: &quot;);&#10;                    System.out.flush();&#10;                    password = scanner.nextLine().trim();&#10;                }&#10;&#10;                if (email == null || email.isEmpty()) {&#10;                    System.out.println(&quot;Email cannot be empty. Please try again.&quot;);&#10;                    continue;&#10;                }&#10;&#10;                // Handle special commands&#10;                if (&quot;exit&quot;.equalsIgnoreCase(email)) {&#10;                    logger.info(&quot;Login process aborted by user&quot;);&#10;                    break;&#10;                } else if (&quot;simulate&quot;.equalsIgnoreCase(email)) {&#10;                    logger.info(&quot;Simulation requested from console login&quot;);&#10;                    return null; // Special case to trigger simulation&#10;                }&#10;&#10;                // Use the provided credentials (not hardcoded values)&#10;                authenticatedUser = authenticateUser(email, password);&#10;&#10;                // Handle authentication result&#10;                if (authenticatedUser == null) {&#10;                    attempts++;&#10;                    logger.warn(&quot;Login failed. Attempt {} of {}&quot;, attempts, MAX_ATTEMPTS);&#10;                    if (attempts &lt; MAX_ATTEMPTS) {&#10;                        System.out.println(&quot;Invalid email or password. Please try again.&quot;);&#10;                    }&#10;                } else {&#10;                    System.out.println(&quot;\nWelcome, &quot; + authenticatedUser.getUsername() + &quot;!&quot;);&#10;                    System.out.println(&quot;You are logged in as: &quot; + authenticatedUser.getRole());&#10;                    displayMenuForRole(authenticatedUser.getRole());&#10;                }&#10;            } catch (Exception e) {&#10;                logger.error(&quot;Error during console login: {}&quot;, e.getMessage(), e);&#10;                System.out.println(&quot;An error occurred. Please try again.&quot;);&#10;                attempts++;&#10;            }&#10;        }&#10;&#10;        if (authenticatedUser == null &amp;&amp; attempts &gt;= MAX_ATTEMPTS) {&#10;            System.out.println(&quot;Maximum login attempts exceeded. Please try again later.&quot;);&#10;        }&#10;&#10;        return authenticatedUser;&#10;    }&#10;&#10;    /**&#10;     * Display appropriate menu based on user role&#10;     */&#10;    private void displayMenuForRole(String role) {&#10;        System.out.println(&quot;\n=== &quot; + role.toUpperCase() + &quot; MENU ===&quot;);&#10;&#10;        switch (role.toLowerCase()) {&#10;            case &quot;admin&quot;:&#10;                System.out.println(&quot;1. Manage Users&quot;);&#10;                System.out.println(&quot;2. View System Reports&quot;);&#10;                System.out.println(&quot;3. Update Inventory&quot;);&#10;                System.out.println(&quot;4. Manage Menu Items&quot;);&#10;                break;&#10;&#10;            case &quot;waiter&quot;:&#10;                System.out.println(&quot;1. Take New Order&quot;);&#10;                System.out.println(&quot;2. View Table Status&quot;);&#10;                System.out.println(&quot;3. Process Payment&quot;);&#10;                break;&#10;&#10;            case &quot;customer&quot;:&#10;                System.out.println(&quot;1. View Menu&quot;);&#10;                System.out.println(&quot;2. Place Order&quot;);&#10;                System.out.println(&quot;3. View Order Status&quot;);&#10;                break;&#10;&#10;            default:&#10;                System.out.println(&quot;No specific menu available for this role.&quot;);&#10;        }&#10;&#10;        System.out.println(&quot;0. Logout&quot;);&#10;        System.out.print(&quot;\nPlease enter your choice: &quot;);&#10;    }&#10;&#10;    @Override&#10;    public boolean isAdmin(String email) {&#10;        return checkUserRole(email, &quot;admin&quot;);&#10;    }&#10;&#10;    @Override&#10;    public boolean isWaiter(String email) {&#10;        return checkUserRole(email, &quot;waiter&quot;);&#10;    }&#10;&#10;    private boolean checkUserRole(String email, String role) {&#10;        String sql = &quot;SELECT role FROM users WHERE email = ?&quot;;&#10;&#10;        try (Connection conn = DatabaseUtil.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setString(1, email);&#10;&#10;            try (ResultSet rs = stmt.executeQuery()) {&#10;                return rs.next() &amp;&amp; role.equals(rs.getString(&quot;role&quot;));&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            logger.error(&quot;Database error checking user role: {}&quot;, e.getMessage(), e);&#10;            return false;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public User createUser(String username, String email, String password, String role) {&#10;        String sql = &quot;INSERT INTO users (username, email, password, role) VALUES (?, ?, ?, ?) RETURNING id&quot;;&#10;&#10;        try (Connection conn = DatabaseUtil.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            // Store the password as plain text&#10;            stmt.setString(1, username);&#10;            stmt.setString(2, email);&#10;            stmt.setString(3, password);&#10;            stmt.setString(4, role);&#10;&#10;            try (ResultSet rs = stmt.executeQuery()) {&#10;                if (rs.next()) {&#10;                    User user = new User();&#10;                    user.setId(rs.getLong(&quot;id&quot;));&#10;                    user.setUsername(username);&#10;                    user.setEmail(email);&#10;                    user.setRole(role);&#10;&#10;                    logger.info(&quot;Created new user: {} with role: {}&quot;, email, role);&#10;                    return user;&#10;                }&#10;            }&#10;&#10;            return null;&#10;&#10;        } catch (SQLException e) {&#10;            logger.error(&quot;Database error creating user: {}&quot;, e.getMessage(), e);&#10;            return null;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean updateLastLogin(Long userId) {&#10;        String sql = &quot;UPDATE users SET last_login = NOW() WHERE id = ?&quot;;&#10;&#10;        try (Connection conn = DatabaseUtil.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setLong(1, userId);&#10;            int rowsAffected = stmt.executeUpdate();&#10;&#10;            return rowsAffected &gt; 0;&#10;&#10;        } catch (SQLException e) {&#10;            logger.error(&quot;Database error updating last login: {}&quot;, e.getMessage(), e);&#10;            return false;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package zeta.foods.service.impl;&#10;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;import zeta.foods.model.User;&#10;import zeta.foods.service.AuthService;&#10;import zeta.foods.utils.DatabaseUtil;&#10;&#10;import java.sql.*;&#10;import java.util.Scanner;&#10;&#10;public class PostgresAuthServiceImpl implements AuthService {&#10;    private static final Logger logger = LoggerFactory.getLogger(PostgresAuthServiceImpl.class);&#10;&#10;    @Override&#10;    public User authenticateUser(String email, String password) {&#10;        // Log authentication attempt but mask password for security&#10;        logger.info(&quot;Attempting to authenticate user: '{}'&quot;, email);&#10;        logger.info(&quot;Password length: {}, Password value: '{}'&quot;, password != null ? password.length() : &quot;null&quot;, password);&#10;&#10;        // Print each character code to check for hidden/special characters&#10;        if (password != null) {&#10;            StringBuilder charCodes = new StringBuilder(&quot;Password char codes: &quot;);&#10;            for (char c : password.toCharArray()) {&#10;                charCodes.append((int)c).append(&quot;,&quot;);&#10;            }&#10;            logger.info(charCodes.toString());&#10;        }&#10;&#10;        // Debug: directly check if user exists with this exact email and password&#10;        try (Connection debugConn = DatabaseUtil.getConnection();&#10;             Statement debugStmt = debugConn.createStatement()) {&#10;&#10;            // First get all users matching the email only&#10;            String emailOnlyQuery = &quot;SELECT * FROM users WHERE email = '&quot; + email + &quot;'&quot;;&#10;            try (ResultSet emailRs = debugStmt.executeQuery(emailOnlyQuery)) {&#10;                if (emailRs.next()) {&#10;                    String dbEmail = emailRs.getString(&quot;email&quot;);&#10;                    String dbPassword = emailRs.getString(&quot;password&quot;);&#10;&#10;                    logger.info(&quot;Found user with email: '{}', DB password: '{}'&quot;, dbEmail, dbPassword);&#10;                    logger.info(&quot;Password length from DB: {}&quot;, dbPassword.length());&#10;&#10;                    // Print each character code of DB password&#10;                    StringBuilder dbCharCodes = new StringBuilder(&quot;DB Password char codes: &quot;);&#10;                    for (char c : dbPassword.toCharArray()) {&#10;                        dbCharCodes.append((int)c).append(&quot;,&quot;);&#10;                    }&#10;                    logger.info(dbCharCodes.toString());&#10;&#10;                    // Direct character-by-character comparison&#10;                    logger.info(&quot;Direct password comparison result: {}&quot;, dbPassword.equals(password));&#10;&#10;                    if (!dbPassword.equals(password)) {&#10;                        logger.info(&quot;Password mismatch details:&quot;);&#10;                        if (dbPassword.length() != password.length()) {&#10;                            logger.info(&quot;Length differs: DB={}, Input={}&quot;, dbPassword.length(), password.length());&#10;                        } else {&#10;                            for (int i = 0; i &lt; dbPassword.length(); i++) {&#10;                                if (dbPassword.charAt(i) != password.charAt(i)) {&#10;                                    logger.info(&quot;Mismatch at position {}: DB='{}' ({}), Input='{}' ({})&quot;,&#10;                                        i, dbPassword.charAt(i), (int)dbPassword.charAt(i),&#10;                                        password.charAt(i), (int)password.charAt(i));&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                } else {&#10;                    logger.warn(&quot;No user found with email: '{}'&quot;, email);&#10;                }&#10;            }&#10;&#10;            // Now try the full authentication query&#10;//            String debugQuery = &quot;SELECT * FROM users WHERE email = '&quot; + email + &quot;' AND password = '&quot; + password + &quot;'&quot;;&#10;            String debugQuery = &quot;SELECT * FROM users WHERE email = 'ambatisaiteja123@gmail.com' AND password = 'admin123'&quot;;&#10;            logger.info(&quot;Executing direct query: {}&quot;, debugQuery);&#10;&#10;&#10;            try (ResultSet debugRs = debugStmt.executeQuery(debugQuery)) {&#10;                if (debugRs.next()) {&#10;                    logger.info(&quot;DEBUG - Direct query found matching user!&quot;);&#10;                } else {&#10;                    logger.warn(&quot;DEBUG - Direct query found NO matching user!&quot;);&#10;                }&#10;            }&#10;        } catch (SQLException e) {&#10;            logger.error(&quot;DEBUG - Error in diagnostic queries: {}&quot;, e.getMessage());&#10;        }&#10;&#10;        String sql = &quot;SELECT * FROM users WHERE email = ? AND password = ?&quot;;&#10;&#10;        logger.info(&quot;Preparing to execute authentication query for email: {}, password: {}&quot;, email, password);&#10;        try (Connection conn = DatabaseUtil.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setString(1, email);&#10;            stmt.setString(2, password);&#10;            logger.debug(&quot;Executing authentication query for email: {}&quot;, email);&#10;&#10;            try (ResultSet rs = stmt.executeQuery()) {&#10;                if (rs.next()) {&#10;                    User user = new User();&#10;                    user.setId(rs.getLong(&quot;id&quot;));&#10;                    user.setUsername(rs.getString(&quot;username&quot;));&#10;                    user.setEmail(rs.getString(&quot;email&quot;));&#10;                    user.setRole(rs.getString(&quot;role&quot;));&#10;&#10;                    // Update last login time&#10;                    updateLastLogin(user.getId());&#10;&#10;                    logger.info(&quot;User authenticated successfully: {}&quot;, email);&#10;                    return user;&#10;                } else {&#10;                    logger.warn(&quot;No user found with email: {} and provided password&quot;, email);&#10;                }&#10;            }&#10;&#10;            logger.warn(&quot;Authentication failed for user: {}&quot;, email);&#10;            return null;&#10;&#10;        } catch (SQLException e) {&#10;            logger.error(&quot;Database error during authentication: {}&quot;, e.getMessage(), e);&#10;            return null;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Interactive console login method that handles the scanner input directly&#10;     * This is useful when running in Docker or other environments where&#10;     * standard input handling might be tricky&#10;     */&#10;    public User consoleLogin() {&#10;        // Use System.console() if available, otherwise fall back to Scanner&#10;        User authenticatedUser = null;&#10;        int attempts = 0;&#10;        final int MAX_ATTEMPTS = 3;&#10;&#10;        // Print a visual separator to make the prompt more visible&#10;        System.out.println(&quot;\n*************************************&quot;);&#10;        System.out.println(&quot;*          LOGIN PROMPT             *&quot;);&#10;        System.out.println(&quot;*************************************\n&quot;);&#10;&#10;        while (attempts &lt; MAX_ATTEMPTS &amp;&amp; authenticatedUser == null) {&#10;            try {&#10;                String email = null;&#10;                String password = null;&#10;&#10;                // Try to use console if available (better for password input)&#10;                if (System.console() != null) {&#10;                    System.out.print(&quot;Enter email: &quot;);&#10;                    email = System.console().readLine();&#10;                    System.out.print(&quot;Enter password: &quot;);&#10;                    password = new String(System.console().readLine());&#10;                } else {&#10;                    // Fall back to Scanner with flush to ensure prompt is visible&#10;                    Scanner scanner = new Scanner(System.in);&#10;                    System.out.print(&quot;Enter email: &quot;);&#10;                    System.out.flush();&#10;                    email = scanner.nextLine().trim();&#10;&#10;                    System.out.print(&quot;Enter password: &quot;);&#10;                    System.out.flush();&#10;                    password = scanner.nextLine().trim();&#10;                }&#10;&#10;                if (email == null || email.isEmpty()) {&#10;                    System.out.println(&quot;Email cannot be empty. Please try again.&quot;);&#10;                    continue;&#10;                }&#10;&#10;                // Handle special commands&#10;                if (&quot;exit&quot;.equalsIgnoreCase(email)) {&#10;                    logger.info(&quot;Login process aborted by user&quot;);&#10;                    break;&#10;                } else if (&quot;simulate&quot;.equalsIgnoreCase(email)) {&#10;                    logger.info(&quot;Simulation requested from console login&quot;);&#10;                    return null; // Special case to trigger simulation&#10;                }&#10;&#10;                // Use the provided credentials (not hardcoded values)&#10;                authenticatedUser = authenticateUser(email, password);&#10;&#10;                // Handle authentication result&#10;                if (authenticatedUser == null) {&#10;                    attempts++;&#10;                    logger.warn(&quot;Login failed. Attempt {} of {}&quot;, attempts, MAX_ATTEMPTS);&#10;                    if (attempts &lt; MAX_ATTEMPTS) {&#10;                        System.out.println(&quot;Invalid email or password. Please try again.&quot;);&#10;                    }&#10;                } else {&#10;                    System.out.println(&quot;\nWelcome, &quot; + authenticatedUser.getUsername() + &quot;!&quot;);&#10;                    System.out.println(&quot;You are logged in as: &quot; + authenticatedUser.getRole());&#10;                    displayMenuForRole(authenticatedUser.getRole());&#10;                }&#10;            } catch (Exception e) {&#10;                logger.error(&quot;Error during console login: {}&quot;, e.getMessage(), e);&#10;                System.out.println(&quot;An error occurred. Please try again.&quot;);&#10;                attempts++;&#10;            }&#10;        }&#10;&#10;        if (authenticatedUser == null &amp;&amp; attempts &gt;= MAX_ATTEMPTS) {&#10;            System.out.println(&quot;Maximum login attempts exceeded. Please try again later.&quot;);&#10;        }&#10;&#10;        return authenticatedUser;&#10;    }&#10;&#10;    /**&#10;     * Display appropriate menu based on user role&#10;     */&#10;    private void displayMenuForRole(String role) {&#10;        System.out.println(&quot;\n=== &quot; + role.toUpperCase() + &quot; MENU ===&quot;);&#10;&#10;        switch (role.toLowerCase()) {&#10;            case &quot;admin&quot;:&#10;                System.out.println(&quot;1. Manage Users&quot;);&#10;                System.out.println(&quot;2. View System Reports&quot;);&#10;                System.out.println(&quot;3. Update Inventory&quot;);&#10;                System.out.println(&quot;4. Manage Menu Items&quot;);&#10;                break;&#10;&#10;            case &quot;waiter&quot;:&#10;                System.out.println(&quot;1. Take New Order&quot;);&#10;                System.out.println(&quot;2. View Table Status&quot;);&#10;                System.out.println(&quot;3. Process Payment&quot;);&#10;                break;&#10;&#10;            case &quot;customer&quot;:&#10;                System.out.println(&quot;1. View Menu&quot;);&#10;                System.out.println(&quot;2. Place Order&quot;);&#10;                System.out.println(&quot;3. View Order Status&quot;);&#10;                break;&#10;&#10;            default:&#10;                System.out.println(&quot;No specific menu available for this role.&quot;);&#10;        }&#10;&#10;        System.out.println(&quot;0. Logout&quot;);&#10;        System.out.print(&quot;\nPlease enter your choice: &quot;);&#10;    }&#10;&#10;    @Override&#10;    public boolean isAdmin(String email) {&#10;        return checkUserRole(email, &quot;admin&quot;);&#10;    }&#10;&#10;    @Override&#10;    public boolean isWaiter(String email) {&#10;        return checkUserRole(email, &quot;waiter&quot;);&#10;    }&#10;&#10;    private boolean checkUserRole(String email, String role) {&#10;        String sql = &quot;SELECT role FROM users WHERE email = ?&quot;;&#10;&#10;        try (Connection conn = DatabaseUtil.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setString(1, email);&#10;&#10;            try (ResultSet rs = stmt.executeQuery()) {&#10;                return rs.next() &amp;&amp; role.equals(rs.getString(&quot;role&quot;));&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            logger.error(&quot;Database error checking user role: {}&quot;, e.getMessage(), e);&#10;            return false;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public User createUser(String username, String email, String password, String role) {&#10;        String sql = &quot;INSERT INTO users (username, email, password, role) VALUES (?, ?, ?, ?) RETURNING id&quot;;&#10;&#10;        try (Connection conn = DatabaseUtil.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            // Store the password as plain text&#10;            stmt.setString(1, username);&#10;            stmt.setString(2, email);&#10;            stmt.setString(3, password);&#10;            stmt.setString(4, role);&#10;&#10;            try (ResultSet rs = stmt.executeQuery()) {&#10;                if (rs.next()) {&#10;                    User user = new User();&#10;                    user.setId(rs.getLong(&quot;id&quot;));&#10;                    user.setUsername(username);&#10;                    user.setEmail(email);&#10;                    user.setRole(role);&#10;&#10;                    logger.info(&quot;Created new user: {} with role: {}&quot;, email, role);&#10;                    return user;&#10;                }&#10;            }&#10;&#10;            return null;&#10;&#10;        } catch (SQLException e) {&#10;            logger.error(&quot;Database error creating user: {}&quot;, e.getMessage(), e);&#10;            return null;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean updateLastLogin(Long userId) {&#10;        String sql = &quot;UPDATE users SET last_login = NOW() WHERE id = ?&quot;;&#10;&#10;        try (Connection conn = DatabaseUtil.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setLong(1, userId);&#10;            int rowsAffected = stmt.executeUpdate();&#10;&#10;            return rowsAffected &gt; 0;&#10;&#10;        } catch (SQLException e) {&#10;            logger.error(&quot;Database error updating last login: {}&quot;, e.getMessage(), e);&#10;            return false;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/zeta/foods/simulation/AuthSimulation.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/zeta/foods/simulation/AuthSimulation.java" />
              <option name="updatedContent" value="package zeta.foods.simulation;&#10;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;import zeta.foods.model.User;&#10;import zeta.foods.service.AuthService;&#10;import zeta.foods.service.impl.PostgresAuthServiceImpl;&#10;&#10;/**&#10; * A simulation tool for testing the authentication system&#10; * without requiring manual input.&#10; */&#10;public class AuthSimulation {&#10;    private static final Logger logger = LoggerFactory.getLogger(AuthSimulation.class);&#10;    private final AuthService authService;&#10;&#10;    public AuthSimulation(AuthService authService) {&#10;        this.authService = authService;&#10;    }&#10;&#10;    /**&#10;     * Run a simulation to test user login with different account types.&#10;     */&#10;    public void runLoginSimulation() {&#10;        logger.info(&quot;=== Starting Authentication Simulation ===&quot;);&#10;        &#10;        // Test admin login&#10;        logger.info(&quot;Testing admin login...&quot;);&#10;        testLogin(&quot;ambatisaiteja123@gmail.com&quot;, &quot;admin123&quot;, &quot;Admin&quot;);&#10;        &#10;        // Test waiter login&#10;        logger.info(&quot;Testing waiter login...&quot;);&#10;        testLogin(&quot;waiter1@restaurant.com&quot;, &quot;12345678&quot;, &quot;Waiter&quot;);&#10;        &#10;        // Test customer login&#10;        logger.info(&quot;Testing customer login...&quot;);&#10;        testLogin(&quot;customer1@example.com&quot;, &quot;12345678&quot;, &quot;Customer&quot;);&#10;        &#10;        // Test invalid login&#10;        logger.info(&quot;Testing invalid login...&quot;);&#10;        testLogin(&quot;nonexistent@example.com&quot;, &quot;wrongpassword&quot;, &quot;Invalid User&quot;);&#10;        &#10;        logger.info(&quot;=== Authentication Simulation Completed ===&quot;);&#10;    }&#10;    &#10;    /**&#10;     * Helper method to test a specific login&#10;     */&#10;    private void testLogin(String email, String password, String userType) {&#10;        logger.info(&quot;Attempting to log in as {}: {}&quot;, userType, email);&#10;        User user = authService.authenticateUser(email, password);&#10;        &#10;        if (user != null) {&#10;            logger.info(&quot;✅ Login successful for {}&quot;, userType);&#10;            logger.info(&quot;User details - ID: {}, Username: {}, Role: {}&quot;, &#10;                    user.getId(), user.getUsername(), user.getRole());&#10;            &#10;            // Display appropriate menu based on user role&#10;            if (user.isAdmin()) {&#10;                displayAdminMenu();&#10;            } else if (user.isWaiter()) {&#10;                displayWaiterMenu();&#10;            } else {&#10;                displayCustomerMenu();&#10;            }&#10;            &#10;            logger.info(&quot;Session ended for {}&quot;, userType);&#10;        } else {&#10;            logger.info(&quot;❌ Login failed for {} with email: {}&quot;, userType, email);&#10;        }&#10;        &#10;        logger.info(&quot;-----------------------------------&quot;);&#10;    }&#10;    &#10;    /**&#10;     * Display admin menu options&#10;     */&#10;    private void displayAdminMenu() {&#10;        logger.info(&quot; ADMIN MENU:&quot;);&#10;        logger.info(&quot;1. Manage Users&quot;);&#10;        logger.info(&quot;2. View System Reports&quot;);&#10;        logger.info(&quot;3. Update Inventory&quot;);&#10;        logger.info(&quot;4. Manage Menu Items&quot;);&#10;        logger.info(&quot;5. Exit&quot;);&#10;        &#10;        // Simulate admin selecting an option&#10;        logger.info(&quot;Admin selected: View System Reports&quot;);&#10;        logger.info(&quot;Generating reports...&quot;);&#10;        logger.info(&quot;Total Orders: 243&quot;);&#10;        logger.info(&quot;Revenue: $5,678.90&quot;);&#10;        logger.info(&quot;Popular Items: Pasta Carbonara, Chicken Parmesan&quot;);&#10;    }&#10;    &#10;    /**&#10;     * Display waiter menu options&#10;     */&#10;    private void displayWaiterMenu() {&#10;        logger.info(&quot; WAITER MENU:&quot;);&#10;        logger.info(&quot;1. Take New Order&quot;);&#10;        logger.info(&quot;2. View Table Status&quot;);&#10;        logger.info(&quot;3. Process Payment&quot;);&#10;        logger.info(&quot;4. Exit&quot;);&#10;        &#10;        // Simulate waiter selecting an option&#10;        logger.info(&quot;Waiter selected: View Table Status&quot;);&#10;        logger.info(&quot;Table 1: Occupied (4 guests) - Order in progress&quot;);&#10;        logger.info(&quot;Table 2: Available&quot;);&#10;        logger.info(&quot;Table 3: Reserved (19:00)&quot;);&#10;        logger.info(&quot;Table 4: Occupied (2 guests) - Waiting for food&quot;);&#10;    }&#10;    &#10;    /**&#10;     * Display customer menu options&#10;     */&#10;    private void displayCustomerMenu() {&#10;        logger.info(&quot; CUSTOMER MENU:&quot;);&#10;        logger.info(&quot;1. View Menu&quot;);&#10;        logger.info(&quot;2. Place Order&quot;);&#10;        logger.info(&quot;3. View Order Status&quot;);&#10;        logger.info(&quot;4. Exit&quot;);&#10;        &#10;        // Simulate customer selecting an option&#10;        logger.info(&quot;Customer selected: View Menu&quot;);&#10;        logger.info(&quot;APPETIZERS:&quot;);&#10;        logger.info(&quot;- Garlic Bread ($4.99)&quot;);&#10;        logger.info(&quot;- Calamari ($8.99)&quot;);&#10;        logger.info(&quot;MAIN COURSES:&quot;);&#10;        logger.info(&quot;- Pasta Carbonara ($14.99)&quot;);&#10;        logger.info(&quot;- Grilled Salmon ($19.99)&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/zeta/foods/utils/DatabaseUtil.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/zeta/foods/utils/DatabaseUtil.java" />
              <option name="originalContent" value="package zeta.foods.utils;&#10;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;&#10;import java.sql.Connection;&#10;import java.sql.DriverManager;&#10;import java.sql.SQLException;&#10;&#10;public class DatabaseUtil {&#10;    private static final Logger logger = LoggerFactory.getLogger(DatabaseUtil.class);&#10;&#10;    private static final String DB_HOST = System.getenv().getOrDefault(&quot;DB_HOST&quot;, &quot;localhost&quot;);&#10;    private static final String DB_PORT = System.getenv().getOrDefault(&quot;DB_PORT&quot;, &quot;5432&quot;);&#10;    private static final String DB_NAME = System.getenv().getOrDefault(&quot;DB_NAME&quot;, &quot;restaurant_management&quot;);&#10;    private static final String DB_USER = System.getenv().getOrDefault(&quot;DB_USER&quot;, &quot;postgres&quot;);&#10;    private static final String DB_PASSWORD = System.getenv().getOrDefault(&quot;DB_PASSWORD&quot;, &quot;postgres&quot;);&#10;&#10;    private static final String JDBC_URL = String.format(&quot;jdbc:postgresql://%s:%s/%s&quot;, DB_HOST, DB_PORT, DB_NAME);&#10;&#10;    private static Connection connection = null;&#10;&#10;    public static Connection getConnection() throws SQLException {&#10;        if (connection == null || connection.isClosed()) {&#10;            try {&#10;                // Load PostgreSQL JDBC driver&#10;                Class.forName(&quot;org.postgresql.Driver&quot;);&#10;&#10;                // Create connection&#10;                connection = DriverManager.getConnection(&#10;                    JDBC_URL,&#10;                    DB_USER,&#10;                    DB_PASSWORD&#10;                );&#10;&#10;                logger.info(&quot;Database connection established&quot;);&#10;            } catch (ClassNotFoundException e) {&#10;                logger.error(&quot;PostgreSQL JDBC driver not found&quot;, e);&#10;                throw new SQLException(&quot;Database driver not found&quot;, e);&#10;            } catch (SQLException e) {&#10;                logger.error(&quot;Failed to connect to database: {}&quot;, e.getMessage(), e);&#10;                throw e;&#10;            }&#10;        }&#10;&#10;        return connection;&#10;    }&#10;&#10;    public static void closeConnection() {&#10;        if (connection != null) {&#10;            try {&#10;                connection.close();&#10;                logger.info(&quot;Database connection closed&quot;);&#10;            } catch (SQLException e) {&#10;                logger.error(&quot;Error closing database connection&quot;, e);&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package zeta.foods.utils;&#10;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;&#10;import java.sql.Connection;&#10;import java.sql.DriverManager;&#10;import java.sql.SQLException;&#10;&#10;public class DatabaseUtil {&#10;    private static final Logger logger = LoggerFactory.getLogger(DatabaseUtil.class);&#10;    &#10;    private static final String DB_HOST = System.getenv().getOrDefault(&quot;DB_HOST&quot;, &quot;localhost&quot;);&#10;    private static final String DB_PORT = System.getenv().getOrDefault(&quot;DB_PORT&quot;, &quot;5432&quot;);&#10;    // Check for new database from migrations, otherwise use default&#10;    private static final String DB_NAME = System.getenv().getOrDefault(&quot;DB_NAME&quot;, &quot;restaurant_management_new&quot;);&#10;    private static final String DB_USER = System.getenv().getOrDefault(&quot;DB_USER&quot;, &quot;restaurant_user&quot;);&#10;    private static final String DB_PASSWORD = System.getenv().getOrDefault(&quot;DB_PASSWORD&quot;, &quot;restaurant_password&quot;);&#10;    &#10;    private static final String JDBC_URL = String.format(&quot;jdbc:postgresql://%s:%s/%s&quot;, DB_HOST, DB_PORT, DB_NAME);&#10;    &#10;    private static Connection connection = null;&#10;    &#10;    public static Connection getConnection() throws SQLException {&#10;        if (connection == null || connection.isClosed()) {&#10;            try {&#10;                // Load PostgreSQL JDBC driver&#10;                Class.forName(&quot;org.postgresql.Driver&quot;);&#10;                &#10;                logger.info(&quot;Connecting to database {} at {}:{}&quot;, DB_NAME, DB_HOST, DB_PORT);&#10;                &#10;                // Create connection&#10;                connection = DriverManager.getConnection(&#10;                    JDBC_URL,&#10;                    DB_USER,&#10;                    DB_PASSWORD&#10;                );&#10;                &#10;                logger.info(&quot;Database connection established&quot;);&#10;            } catch (ClassNotFoundException e) {&#10;                logger.error(&quot;PostgreSQL JDBC driver not found&quot;, e);&#10;                throw new SQLException(&quot;Database driver not found&quot;, e);&#10;            } catch (SQLException e) {&#10;                logger.error(&quot;Failed to connect to database: {}&quot;, e.getMessage(), e);&#10;                throw e;&#10;            }&#10;        }&#10;        &#10;        return connection;&#10;    }&#10;    &#10;    public static void closeConnection() {&#10;        if (connection != null) {&#10;            try {&#10;                connection.close();&#10;                logger.info(&quot;Database connection closed&quot;);&#10;            } catch (SQLException e) {&#10;                logger.error(&quot;Error closing database connection&quot;, e);&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/zeta/foods/utils/InventoryManager.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/zeta/foods/utils/InventoryManager.java" />
              <option name="updatedContent" value="package zeta.foods.utils;&#10;&#10;import java.io.*;&#10;import java.nio.file.*;&#10;import java.util.*;&#10;import java.util.concurrent.ConcurrentHashMap;&#10;&#10;public class InventoryManager {&#10;    private static final String DEFAULT_INVENTORY_PATH = &quot;src/main/resources/inventory.txt&quot;;&#10;    private static final String CURRENT_INVENTORY_PATH = &quot;src/main/resources/CurrentInventory.txt&quot;;&#10;    &#10;    // Map to store inventory items and quantities&#10;    private static Map&lt;String, Integer&gt; currentInventory = new ConcurrentHashMap&lt;&gt;();&#10;    private static Map&lt;String, Integer&gt; defaultInventory = new ConcurrentHashMap&lt;&gt;();&#10;    &#10;    static {&#10;        // Load both default and current inventory on startup&#10;        loadDefaultInventory();&#10;        loadCurrentInventory();&#10;        &#10;        // If current inventory is empty, initialize it with default inventory&#10;        if (currentInventory.isEmpty()) {&#10;            currentInventory.putAll(defaultInventory);&#10;            saveCurrentInventory();&#10;        }&#10;    }&#10;    &#10;    // Load default inventory from inventory.txt&#10;    private static void loadDefaultInventory() {&#10;        try {&#10;            List&lt;String&gt; lines = Files.readAllLines(Paths.get(DEFAULT_INVENTORY_PATH));&#10;            &#10;            for (String line : lines) {&#10;                if (line.trim().isEmpty() || line.startsWith(&quot;//&quot;)) {&#10;                    continue;&#10;                }&#10;                &#10;                String[] parts = line.split(&quot;-&quot;);&#10;                if (parts.length == 2) {&#10;                    String ingredient = parts[0].trim();&#10;                    int quantity = Integer.parseInt(parts[1].trim());&#10;                    defaultInventory.put(ingredient, quantity);&#10;                }&#10;            }&#10;            &#10;            System.out.println(&quot;Default inventory loaded successfully with &quot; + defaultInventory.size() + &quot; items.&quot;);&#10;        } catch (IOException e) {&#10;            System.err.println(&quot;Error loading default inventory: &quot; + e.getMessage());&#10;        }&#10;    }&#10;    &#10;    // Load current inventory from CurrentInventory.txt&#10;    private static void loadCurrentInventory() {&#10;        try {&#10;            Path currentInventoryPath = Paths.get(CURRENT_INVENTORY_PATH);&#10;            &#10;            if (!Files.exists(currentInventoryPath) || Files.size(currentInventoryPath) == 0) {&#10;                System.out.println(&quot;Current inventory file is empty or doesn't exist. Will initialize with default inventory.&quot;);&#10;                return;&#10;            }&#10;            &#10;            List&lt;String&gt; lines = Files.readAllLines(currentInventoryPath);&#10;            &#10;            for (String line : lines) {&#10;                if (line.trim().isEmpty() || line.startsWith(&quot;//&quot;)) {&#10;                    continue;&#10;                }&#10;                &#10;                String[] parts = line.split(&quot;-&quot;);&#10;                if (parts.length == 2) {&#10;                    String ingredient = parts[0].trim();&#10;                    int quantity = Integer.parseInt(parts[1].trim());&#10;                    currentInventory.put(ingredient, quantity);&#10;                }&#10;            }&#10;            &#10;            System.out.println(&quot;Current inventory loaded successfully with &quot; + currentInventory.size() + &quot; items.&quot;);&#10;        } catch (IOException e) {&#10;            System.err.println(&quot;Error loading current inventory: &quot; + e.getMessage());&#10;        }&#10;    }&#10;    &#10;    // Save current inventory to CurrentInventory.txt&#10;    public static void saveCurrentInventory() {&#10;        try (BufferedWriter writer = new BufferedWriter(new FileWriter(CURRENT_INVENTORY_PATH))) {&#10;            for (Map.Entry&lt;String, Integer&gt; entry : currentInventory.entrySet()) {&#10;                writer.write(entry.getKey() + &quot; - &quot; + entry.getValue());&#10;                writer.newLine();&#10;            }&#10;            System.out.println(&quot;Current inventory saved successfully.&quot;);&#10;        } catch (IOException e) {&#10;            System.err.println(&quot;Error saving current inventory: &quot; + e.getMessage());&#10;        }&#10;    }&#10;    &#10;    // Get available quantity of an ingredient&#10;    public static int getAvailableQuantity(String ingredient) {&#10;        return currentInventory.getOrDefault(ingredient, 0);&#10;    }&#10;    &#10;    // Check if ingredients are available in required quantities&#10;    public static boolean checkIngredientsAvailability(Map&lt;String, Integer&gt; ingredients) {&#10;        for (Map.Entry&lt;String, Integer&gt; entry : ingredients.entrySet()) {&#10;            String ingredient = entry.getKey();&#10;            int requiredQuantity = entry.getValue();&#10;            &#10;            if (getAvailableQuantity(ingredient) &lt; requiredQuantity) {&#10;                return false;&#10;            }&#10;        }&#10;        return true;&#10;    }&#10;    &#10;    // Update inventory after using ingredients&#10;    public static boolean useIngredients(Map&lt;String, Integer&gt; ingredients) {&#10;        // First check if all ingredients are available&#10;        if (!checkIngredientsAvailability(ingredients)) {&#10;            return false;&#10;        }&#10;        &#10;        // If all are available, deduct them from inventory&#10;        for (Map.Entry&lt;String, Integer&gt; entry : ingredients.entrySet()) {&#10;            String ingredient = entry.getKey();&#10;            int requiredQuantity = entry.getValue();&#10;            &#10;            int currentQuantity = currentInventory.getOrDefault(ingredient, 0);&#10;            currentInventory.put(ingredient, currentQuantity - requiredQuantity);&#10;        }&#10;        &#10;        // Save the updated inventory&#10;        saveCurrentInventory();&#10;        return true;&#10;    }&#10;    &#10;    // Get list of missing ingredients&#10;    public static List&lt;String&gt; getMissingIngredients(Map&lt;String, Integer&gt; ingredients) {&#10;        List&lt;String&gt; missingIngredients = new ArrayList&lt;&gt;();&#10;        &#10;        for (Map.Entry&lt;String, Integer&gt; entry : ingredients.entrySet()) {&#10;            String ingredient = entry.getKey();&#10;            int requiredQuantity = entry.getValue();&#10;            &#10;            if (getAvailableQuantity(ingredient) &lt; requiredQuantity) {&#10;                missingIngredients.add(ingredient + &quot; (Need: &quot; + requiredQuantity + &#10;                                      &quot;, Available: &quot; + getAvailableQuantity(ingredient) + &quot;)&quot;);&#10;            }&#10;        }&#10;        &#10;        return missingIngredients;&#10;    }&#10;    &#10;    // Reset current inventory to default values&#10;    public static void resetInventory() {&#10;        currentInventory.clear();&#10;        currentInventory.putAll(defaultInventory);&#10;        saveCurrentInventory();&#10;        System.out.println(&quot;Inventory reset to default values.&quot;);&#10;    }&#10;    &#10;    // Get a copy of the current inventory&#10;    public static Map&lt;String, Integer&gt; getCurrentInventory() {&#10;        return new HashMap&lt;&gt;(currentInventory);&#10;    }&#10;    &#10;    // Restock an item to its default quantity&#10;    public static void restockItem(String ingredient) {&#10;        if (defaultInventory.containsKey(ingredient)) {&#10;            currentInventory.put(ingredient, defaultInventory.get(ingredient));&#10;            saveCurrentInventory();&#10;            System.out.println(ingredient + &quot; restocked to default quantity: &quot; + defaultInventory.get(ingredient));&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/CurrentInventory.txt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/CurrentInventory.txt" />
              <option name="updatedContent" value="Carrot - 50&#10;Potato - 30&#10;Tomato - 20&#10;Cabbage - 15&#10;Onion - 25&#10;Cucumber - 10&#10;Chicken - 5&#10;Fish - 8&#10;Egg - 12&#10;Milk - 20&#10;Bread - 18&#10;Cheese - 22&#10;Mutton - 7&#10;Rice - 40&#10;Pasta - 35&#10;Noodles - 28" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>